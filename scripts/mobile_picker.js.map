{"version":3,"names":[],"mappings":"","sources":["mobile_picker.js"],"sourcesContent":["// File: src/js/pages/mobile_picker.js\r\n// Added Manual Input Fallback for Order ID and Location Scan Step\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    console.log(\"DOM Loaded. Initializing script.\");\r\n\r\n    // --- Configuration ---\r\n    const GET_TASK_API_URL = '/api/picking/get_next_task.php';\r\n    const CONFIRM_PICK_API_URL = '/api/picking/confirm_pick.php';\r\n\r\n    // --- DOM Elements ---\r\n    const scanOrderBtn = document.getElementById('scan-order-btn');\r\n    const scannerContainer = document.getElementById('scanner-container');\r\n    const readerDiv = document.getElementById('reader');\r\n    const stopScanBtn = document.getElementById('stop-scan-btn');\r\n    const scannedOrderIdEl = document.getElementById('scanned-order-id');\r\n\r\n    // Manual Input Elements\r\n    const scanOrderSection = document.getElementById('scan-order-section');\r\n    const manualOrderSection = document.getElementById('manual-order-section');\r\n    const orderIdInput = document.getElementById('order-id-input'); // Manual input field\r\n    const loadManualOrderBtn = document.getElementById('load-manual-order-btn'); // Manual load button\r\n    const toggleManualInputBtn = document.getElementById('toggle-manual-input-btn'); // Button to show manual input\r\n    const toggleScanInputBtn = document.getElementById('toggle-scan-input-btn'); // Button to show scanner input\r\n\r\n    const locationScanPrompt = document.getElementById('location-scan-prompt');\r\n    const targetLocationCodeEl = document.getElementById('target-location-code');\r\n    const scanLocationBtn = document.getElementById('scan-location-btn');\r\n\r\n    const taskDisplay = document.getElementById('task-display');\r\n    const confirmationArea = document.getElementById('confirmation-area');\r\n    const messageArea = document.getElementById('message-area');\r\n    const allDoneMessage = document.getElementById('all-done-message');\r\n    const quantityPickedInput = document.getElementById('quantity-picked-input');\r\n    const confirmPickBtn = document.getElementById('confirm-pick-btn');\r\n    const loadingOverlay = document.getElementById('loading-overlay');\r\n\r\n    // Task Data Elements\r\n    const productNameEl = document.getElementById('product-name');\r\n    const productSkuEl = document.getElementById('product-sku');\r\n    const locationCodeEl = document.getElementById('location-code'); // In task display\r\n    const batchNumberEl = document.getElementById('batch-number');\r\n    const inventoryIdEl = document.getElementById('inventory-id');\r\n    const quantityToPickEl = document.getElementById('quantity-to-pick');\r\n    const totalNeededEl = document.getElementById('total-needed');\r\n    const availableInLocationEl = document.getElementById('available-in-location');\r\n\r\n    // Check if essential elements were found\r\n    if (!scanOrderBtn) console.error(\"Error: Scan Order button not found!\");\r\n    if (!manualOrderSection) console.error(\"Error: Manual order section not found!\");\r\n    if (!scanOrderSection) console.error(\"Error: Scan order section not found!\");\r\n    if (!orderIdInput) console.error(\"Error: Manual Order ID input not found!\");\r\n    if (!loadManualOrderBtn) console.error(\"Error: Manual Load Order button not found!\");\r\n    if (!toggleManualInputBtn) console.error(\"Error: Toggle Manual Input button not found!\");\r\n    if (!toggleScanInputBtn) console.error(\"Error: Toggle Scan Input button not found!\");\r\n    if (!scanLocationBtn) console.error(\"Error: Scan Location button not found!\");\r\n    if (!readerDiv) console.error(\"Error: Scanner reader div not found!\");\r\n    if (!scannerContainer) console.error(\"Error: Scanner container div not found!\");\r\n    if (!confirmPickBtn) console.error(\"Error: Confirm Pick button not found!\");\r\n    if (!loadingOverlay) console.error(\"Error: Loading overlay not found!\");\r\n    if (!quantityPickedInput) console.error(\"Error: Quantity picked input not found!\");\r\n    if (!stopScanBtn) console.error(\"Error: Stop Scan button not found!\");\r\n\r\n    // --- State ---\r\n    let currentTask = null; // Holds the full task details from API\r\n    let html5QrCode = null; // Scanner instance\r\n    let currentScanMode = null; // What are we expecting to scan? 'order', 'location', 'product' etc.\r\n\r\n    // --- Functions ---\r\n\r\n    /**\r\n     * Shows the loading overlay.\r\n     */\r\n    function showLoading() {\r\n        if (loadingOverlay) {\r\n            loadingOverlay.classList.remove('hidden');\r\n        } else {\r\n            console.error(\"Cannot show loading: overlay element missing.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Hides the loading overlay.\r\n     */\r\n    function hideLoading() {\r\n        if (loadingOverlay) {\r\n            loadingOverlay.classList.add('hidden');\r\n        } else {\r\n             console.error(\"Cannot hide loading: overlay element missing.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Displays a message to the user.\r\n     * @param {string} message - The message text.\r\n     * @param {boolean} [isError=false] - True if it's an error message.\r\n     */\r\n    function showMessage(message, isError = false) {\r\n        if (!messageArea) return;\r\n        messageArea.textContent = message;\r\n        // Use modifier classes for styling defined in SCSS\r\n        messageArea.className = `message-area ${isError ? 'message-area--error' : 'message-area--success'}`;\r\n        // Auto-clear non-error messages only\r\n        if (!isError) {\r\n            setTimeout(() => {\r\n                if (messageArea.textContent === message) {\r\n                   messageArea.textContent = '';\r\n                   messageArea.className = 'message-area'; // Reset class\r\n                }\r\n            }, 3000); // Shorter timeout for success messages\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears all dynamic sections of the UI and resets the state.\r\n     */\r\n    function resetUI() {\r\n        console.log(\"Resetting UI\");\r\n        if (taskDisplay) taskDisplay.classList.add('hidden');\r\n        if (confirmationArea) confirmationArea.classList.add('hidden');\r\n        if (allDoneMessage) allDoneMessage.classList.add('hidden');\r\n        if (locationScanPrompt) locationScanPrompt.classList.add('hidden');\r\n        if (scannedOrderIdEl) scannedOrderIdEl.textContent = '';\r\n        if (targetLocationCodeEl) targetLocationCodeEl.textContent = '';\r\n        if (messageArea) messageArea.textContent = ''; // Clear messages\r\n        if (orderIdInput) orderIdInput.value = ''; // Clear manual input\r\n\r\n        // Hide manual input, show scan button by default\r\n        if (manualOrderSection) manualOrderSection.classList.add('hidden');\r\n        if (scanOrderSection) scanOrderSection.classList.remove('hidden');\r\n\r\n        // Clear specific task details\r\n        const elementsToClear = [productNameEl, productSkuEl, locationCodeEl, batchNumberEl, inventoryIdEl, quantityToPickEl, totalNeededEl, availableInLocationEl];\r\n        elementsToClear.forEach(el => { if (el) el.textContent = ''; });\r\n\r\n        // Reset default values for numeric displays if needed\r\n        if (inventoryIdEl) inventoryIdEl.textContent = '0';\r\n        if (quantityToPickEl) quantityToPickEl.textContent = '0';\r\n        if (totalNeededEl) totalNeededEl.textContent = '0';\r\n        if (availableInLocationEl) availableInLocationEl.textContent = '0';\r\n        if (quantityPickedInput) quantityPickedInput.value = '';\r\n\r\n        currentTask = null;\r\n        currentScanMode = null; // Reset scan mode\r\n        stopScanner(); // Ensure scanner is stopped\r\n    }\r\n\r\n    /**\r\n     * Displays the product picking details after location is verified.\r\n     * @param {object} taskData - The task data object from the API.\r\n     */\r\n    function displayTaskDetails(taskData) {\r\n        console.log(\"Displaying task details:\", taskData);\r\n        currentTask = taskData; // Ensure current task is set\r\n\r\n        if (productNameEl) productNameEl.textContent = taskData.product_name || 'N/A';\r\n        if (productSkuEl) productSkuEl.textContent = taskData.product_sku || 'N/A';\r\n        if (locationCodeEl) locationCodeEl.textContent = taskData.location_code || 'N/A'; // Show location here too\r\n        if (batchNumberEl) batchNumberEl.textContent = taskData.batch_number || 'None';\r\n        if (inventoryIdEl) inventoryIdEl.textContent = taskData.inventory_id || '0';\r\n        if (quantityToPickEl) quantityToPickEl.textContent = taskData.quantity_to_pick || '0';\r\n        if (totalNeededEl) totalNeededEl.textContent = taskData.total_needed_for_item || '0';\r\n        if (availableInLocationEl) availableInLocationEl.textContent = taskData.available_in_location || '0';\r\n\r\n        // Set quantity input value and max attribute\r\n        if (quantityPickedInput && quantityPickedInput instanceof HTMLInputElement) {\r\n            try {\r\n                quantityPickedInput.value = taskData.quantity_to_pick || '';\r\n                const maxVal = parseInt(taskData.quantity_to_pick, 10);\r\n                quantityPickedInput.max = !isNaN(maxVal) ? maxVal.toString() : '';\r\n            } catch (e) { console.error(\"Error setting input props:\", e); }\r\n        } else {\r\n            console.warn(\"quantityPickedInput not found or is not an input element.\");\r\n        }\r\n\r\n        // Hide location prompt, show task details and confirmation\r\n        if (locationScanPrompt) locationScanPrompt.classList.add('hidden');\r\n        if (taskDisplay) taskDisplay.classList.remove('hidden');\r\n        if (confirmationArea) confirmationArea.classList.remove('hidden');\r\n        if (allDoneMessage) allDoneMessage.classList.add('hidden');\r\n    }\r\n\r\n    /**\r\n     * Shows the prompt to scan the target location.\r\n     * @param {object} taskData - The task data object from the API.\r\n     */\r\n    function showLocationScanPrompt(taskData) {\r\n        console.log(\"Showing location scan prompt for location:\", taskData.location_code);\r\n        currentTask = taskData; // Store the task data\r\n        currentScanMode = 'location'; // Set the expected scan type\r\n\r\n        if (targetLocationCodeEl) targetLocationCodeEl.textContent = taskData.location_code || 'N/A';\r\n\r\n        // Hide other sections, show the prompt\r\n        if (taskDisplay) taskDisplay.classList.add('hidden');\r\n        if (confirmationArea) confirmationArea.classList.add('hidden');\r\n        if (allDoneMessage) allDoneMessage.classList.add('hidden');\r\n        if (locationScanPrompt) locationScanPrompt.classList.remove('hidden');\r\n\r\n        showMessage(\"Please scan the location barcode.\", false);\r\n    }\r\n\r\n\r\n    /**\r\n     * Fetches the next picking task from the API for the given order ID.\r\n     * @param {string|number} orderId - The Order ID (scanned or manually entered).\r\n     */\r\n    async function fetchNextTask(orderId) {\r\n        // Validate Order ID (allow non-numeric strings)\r\n        if (!orderId || String(orderId).trim() === '') {\r\n             showMessage('Please enter or scan a valid Order ID.', true);\r\n             stopScanner(); // Stop scanner if active\r\n             return;\r\n        }\r\n        const trimmedOrderId = String(orderId).trim();\r\n        console.log(`fetchNextTask called with Order ID: ${trimmedOrderId}`);\r\n\r\n        if (scannedOrderIdEl) scannedOrderIdEl.textContent = `Loading Order: ${trimmedOrderId}`;\r\n        resetUI(); // Reset previous state but keep the input mode (scan/manual) visible\r\n        showLoading();\r\n\r\n        try {\r\n            // Use the same API endpoint regardless of input method\r\n            const response = await fetch(`${GET_TASK_API_URL}?order_id=${encodeURIComponent(trimmedOrderId)}`);\r\n             if (!response.ok) {\r\n                let errorMsg = `HTTP error! Status: ${response.status}`;\r\n                try { errorMsg = (await response.json()).message || errorMsg; } catch(e){}\r\n                throw new Error(errorMsg);\r\n            }\r\n            const result = await response.json();\r\n            console.log(\"Fetch result:\", result);\r\n\r\n            if (result.status === 'success') {\r\n                showLocationScanPrompt(result.data); // Go to location scan prompt\r\n                if (scannedOrderIdEl) scannedOrderIdEl.textContent = `Loaded Order: ${trimmedOrderId}`;\r\n            } else if (result.status === 'complete') {\r\n                if (allDoneMessage) allDoneMessage.classList.remove('hidden');\r\n                showMessage('Order picking complete!', false);\r\n                if (scannedOrderIdEl) scannedOrderIdEl.textContent = `Order ${trimmedOrderId} is complete.`;\r\n            } else {\r\n                // Handle API errors like \"order not found\" or \"no stock\"\r\n                const errorMessage = result.message || `API Error: ${result.status}`;\r\n                showMessage(errorMessage, true);\r\n                if (scannedOrderIdEl) scannedOrderIdEl.textContent = `Error loading Order: ${trimmedOrderId}`;\r\n            }\r\n        } catch (error) {\r\n            console.error('Fetch Task Error Caught:', error);\r\n            showMessage(`Error: ${error.message || 'Network error or invalid response.'}`, true);\r\n            if (scannedOrderIdEl) scannedOrderIdEl.textContent = `Error loading Order: ${trimmedOrderId}`;\r\n        } finally {\r\n            hideLoading();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Confirms the pick quantity for the current task via API.\r\n     */\r\n    async function confirmPick() {\r\n        if (!currentTask) {\r\n            showMessage('No active task loaded to confirm.', true);\r\n            return;\r\n        }\r\n        const quantity = parseInt(quantityPickedInput.value, 10);\r\n\r\n        // Input validation\r\n         if (isNaN(quantity) || quantity <= 0) {\r\n            showMessage('Please enter a valid positive quantity picked.', true);\r\n            if (quantityPickedInput) quantityPickedInput.focus();\r\n            return;\r\n        }\r\n        // Check against suggested quantity for this step\r\n        if (quantity > currentTask.quantity_to_pick) {\r\n            showMessage(`Cannot pick more than ${currentTask.quantity_to_pick} from this specific location/batch for this step.`, true);\r\n            if (quantityPickedInput) quantityPickedInput.focus();\r\n            return;\r\n        }\r\n        // Check against total available in this specific inventory record\r\n         if (quantity > currentTask.available_in_location) {\r\n             showMessage(`Error: Only ${currentTask.available_in_location} available in this location/batch.`, true);\r\n             if (quantityPickedInput) quantityPickedInput.focus();\r\n             return;\r\n         }\r\n\r\n        showLoading();\r\n        if (messageArea) messageArea.textContent = '';\r\n\r\n        const payload = {\r\n            order_item_id: currentTask.order_item_id,\r\n            inventory_id: currentTask.inventory_id,\r\n            quantity_picked: quantity\r\n        };\r\n        console.log(\"Confirm pick payload:\", payload);\r\n\r\n        try {\r\n            const response = await fetch(CONFIRM_PICK_API_URL, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },\r\n                body: JSON.stringify(payload)\r\n            });\r\n\r\n             if (!response.ok) {\r\n                let errorMsg = `HTTP error! Status: ${response.status}`;\r\n                 try { errorMsg = (await response.json()).message || errorMsg; } catch(e){}\r\n                throw new Error(errorMsg);\r\n            }\r\n            const result = await response.json();\r\n            console.log(\"Confirm result:\", result);\r\n\r\n            if (result.status === 'success') {\r\n                showMessage(result.message || 'Pick confirmed successfully!', false);\r\n                // Fetch next task using order_id stored in currentTask\r\n                // Important: Ensure order_id is returned by get_next_task API\r\n                if (currentTask.order_id) {\r\n                     fetchNextTask(currentTask.order_id);\r\n                } else {\r\n                    console.error(\"Cannot fetch next task: order_id missing from current task data.\");\r\n                    showMessage(\"Pick confirmed, but couldn't fetch next task. Please scan order again.\", true);\r\n                    resetUI(); // Reset UI completely\r\n                }\r\n            } else {\r\n                // Handle API errors like \"failed to update\"\r\n                const errorMessage = result.message || `API Error: ${result.status}`;\r\n                showMessage(errorMessage, true);\r\n            }\r\n        } catch (error) {\r\n            console.error('Confirm Pick Error Caught:', error);\r\n            showMessage(`Error: ${error.message || 'Network error or invalid response.'}`, true);\r\n        } finally {\r\n            hideLoading();\r\n        }\r\n    }\r\n\r\n    // --- Scanner Functions ---\r\n\r\n    /**\r\n     * Callback function executed by the scanner library on successful scan.\r\n     * @param {string} decodedText - The text decoded from the barcode.\r\n     * @param {object} decodedResult - Detailed result object from the library.\r\n     */\r\n    function onScanSuccess(decodedText, decodedResult) {\r\n        console.log(`Scan Success! Mode: ${currentScanMode}, Decoded: ${decodedText}`);\r\n        showMessage(`Scanned: ${decodedText}`, false);\r\n        stopScanner(false); // Stop scanner after successful scan, don't reset UI yet\r\n\r\n        // Process based on the current scanning mode\r\n        if (currentScanMode === 'order') {\r\n            fetchNextTask(decodedText); // Process the scanned order ID\r\n        } else if (currentScanMode === 'location') {\r\n            if (!currentTask) {\r\n                showMessage(\"Error: No task loaded to verify location against.\", true);\r\n                return; // Should not happen if UI flow is correct\r\n            }\r\n            // Compare scanned location with target location (case-insensitive comparison is safer)\r\n            if (decodedText.trim().toUpperCase() === currentTask.location_code.trim().toUpperCase()) {\r\n                showMessage(\"Location verified!\", false);\r\n                displayTaskDetails(currentTask); // Show product details now\r\n            } else {\r\n                showMessage(`Wrong Location! Scanned: ${decodedText}, Expected: ${currentTask.location_code}`, true);\r\n                // User needs to press \"Scan Location\" button again\r\n            }\r\n        }\r\n        // Add other scan modes ('product', 'batch') here later\r\n        else {\r\n            console.warn(\"Scan occurred in unknown mode:\", currentScanMode);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback function executed by the scanner library on scan failure.\r\n     * @param {string} error - Error message from the library.\r\n     */\r\n    function onScanFailure(error) {\r\n        // Usually too noisy to log every time, uncomment if needed for debugging\r\n        // console.warn(`Code scan error = ${error}`);\r\n    }\r\n\r\n    /**\r\n     * Initializes and starts the barcode scanner.\r\n     */\r\n    function startScanner() {\r\n        // Check if library is loaded\r\n        if (typeof Html5Qrcode === 'undefined') {\r\n             showMessage(\"Error: Scanner library not loaded.\", true); return;\r\n        }\r\n        // Prevent starting multiple instances\r\n        if (html5QrCode && html5QrCode.isScanning) {\r\n            console.log(\"Scanner already running.\"); return;\r\n        }\r\n        // Create instance if needed\r\n        if (!html5QrCode) {\r\n            try {\r\n                 html5QrCode = new Html5Qrcode(\"reader\"); // \"reader\" is the ID of the div\r\n            } catch (e) {\r\n                 console.error(\"Failed to initialize Html5Qrcode:\", e);\r\n                 showMessage(\"Failed to initialize scanner.\", true);\r\n                 return;\r\n            }\r\n        }\r\n\r\n        // Scanner configuration\r\n        const config = {\r\n            fps: 10, // Scan frequency\r\n            qrbox: (viewfinderWidth, viewfinderHeight) => {\r\n                 // Responsive scan box size\r\n                 let edgePercentage = 0.80;\r\n                 let minEdgeSize = 200;\r\n                 let edgeSize = Math.min(viewfinderWidth, viewfinderHeight);\r\n                 let qrboxSize = Math.floor(edgeSize * edgePercentage);\r\n                 return { width: Math.max(qrboxSize, minEdgeSize), height: Math.max(qrboxSize, minEdgeSize) };\r\n            },\r\n            aspectRatio: 1.0, // Preferred aspect ratio\r\n            rememberLastUsedCamera: true, // Remember user's camera choice\r\n            supportedScanTypes: [Html5QrcodeScanType.SCAN_TYPE_CAMERA] // Only use camera\r\n        };\r\n\r\n        console.log(\"Starting scanner for mode:\", currentScanMode);\r\n        if (scannerContainer) scannerContainer.classList.remove('hidden'); // Show scanner view\r\n        if (stopScanBtn) stopScanBtn.classList.remove('hidden'); // Show stop button\r\n        if (messageArea) messageArea.textContent = `Point camera at ${currentScanMode || 'barcode'}...`; // Prompt\r\n\r\n        // Start scanning, preferring the back camera\r\n        html5QrCode.start( { facingMode: \"environment\" }, config, onScanSuccess, onScanFailure)\r\n        .catch((err) => {\r\n            console.error(\"Failed to start scanner (environment):\", err);\r\n            // Try front camera as fallback (optional)\r\n            if (String(err).includes(\"NotFoundError\") || String(err).includes(\"Requested camera not available\")) {\r\n                console.log(\"Trying front camera...\");\r\n                html5QrCode.start({ facingMode: \"user\" }, config, onScanSuccess, onScanFailure)\r\n                 .catch(err2 => {\r\n                    console.error(\"Failed to start scanner (user):\", err2);\r\n                    let userMessage = `Error starting camera: ${err2}`;\r\n                    if (String(err2).includes(\"Permission denied\") || String(err2).includes(\"NotAllowedError\")) {\r\n                        userMessage = \"Camera permission denied. Please allow camera access.\";\r\n                    }\r\n                      showMessage(userMessage, true);\r\n                      if (scannerContainer) scannerContainer.classList.add('hidden');\r\n                      if (stopScanBtn) stopScanBtn.classList.add('hidden');\r\n                 });\r\n            } else {\r\n                 // Handle other errors like permission denied directly\r\n                 let userMessage = `Error starting scanner: ${err}`;\r\n                 if (String(err).includes(\"Permission denied\") || String(err).includes(\"NotAllowedError\")) {\r\n                     userMessage = \"Camera permission denied. Please allow camera access.\";\r\n                 }\r\n                 showMessage(userMessage, true);\r\n                 if (scannerContainer) scannerContainer.classList.add('hidden');\r\n                 if (stopScanBtn) stopScanBtn.classList.add('hidden');\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Stops the barcode scanner if it's running.\r\n     * @param {boolean} [shouldResetUI=false] - Whether to reset the entire UI after stopping.\r\n     */\r\n    function stopScanner(shouldResetUI = false) {\r\n        // Check if the library and scanning state exist before trying to stop\r\n        // Use optional chaining ?. for safer access\r\n        if (html5QrCode?.isScanning) {\r\n            console.log(\"Attempting to stop scanner...\");\r\n            html5QrCode.stop().then(() => {\r\n                console.log(\"Scanner stopped successfully via stop().\");\r\n                if (scannerContainer) scannerContainer.classList.add('hidden');\r\n                if (stopScanBtn) stopScanBtn.classList.add('hidden');\r\n                if (shouldResetUI) resetUI();\r\n            }).catch((err) => {\r\n                console.error(\"Error stopping scanner:\", err);\r\n                // Force hide UI elements even if stop() failed\r\n                if (scannerContainer) scannerContainer.classList.add('hidden');\r\n                if (stopScanBtn) stopScanBtn.classList.add('hidden');\r\n                if (shouldResetUI) resetUI();\r\n            });\r\n        } else {\r\n             // Ensure UI is hidden if scanner wasn't active or instance doesn't exist\r\n             if (scannerContainer) scannerContainer.classList.add('hidden');\r\n             if (stopScanBtn) stopScanBtn.classList.add('hidden');\r\n             if (shouldResetUI) resetUI();\r\n        }\r\n    }\r\n\r\n    // --- Event Listeners ---\r\n\r\n    // Scan Order Button\r\n    if (scanOrderBtn) {\r\n        scanOrderBtn.addEventListener('click', () => {\r\n            console.log(\"Scan Order button clicked.\");\r\n            resetUI(); // Reset previous state\r\n            currentScanMode = 'order'; // Set mode for order scanning\r\n            startScanner();\r\n        });\r\n    } else { console.error(\"Scan Order button not found.\"); }\r\n\r\n    // Scan Location Button\r\n    if (scanLocationBtn) {\r\n         scanLocationBtn.addEventListener('click', () => {\r\n            console.log(\"Scan Location button clicked.\");\r\n            // Mode should be 'location' if this button is visible, but set just in case\r\n            currentScanMode = 'location';\r\n            startScanner(); // Start scanner specifically for location\r\n        });\r\n    } else { console.error(\"Scan Location button not found.\"); }\r\n\r\n    // Stop Scan Button\r\n    if (stopScanBtn) {\r\n        stopScanBtn.addEventListener('click', () => {\r\n            console.log(\"Stop Scan button clicked.\");\r\n            stopScanner(false); // Stop scanner, don't reset task UI\r\n            showMessage(\"Scanning stopped.\", false);\r\n        });\r\n    } else { console.error(\"Stop Scan button not found.\"); }\r\n\r\n    // Confirm Pick Button\r\n    if (confirmPickBtn) {\r\n        confirmPickBtn.addEventListener('click', confirmPick);\r\n    } else { console.error(\"Confirm Pick button not found.\"); }\r\n\r\n    // Quantity Input Enter Key\r\n    if (quantityPickedInput) {\r\n        quantityPickedInput.addEventListener('keypress', (event) => {\r\n            if (event.key === 'Enter') { event.preventDefault(); confirmPick(); }\r\n        });\r\n    } else { console.error(\"Quantity picked input not found.\"); }\r\n\r\n    // Toggle Manual Input Button\r\n    if (toggleManualInputBtn) {\r\n        toggleManualInputBtn.addEventListener('click', () => {\r\n            console.log(\"Toggle Manual Input button clicked.\");\r\n            stopScanner(false); // Stop scanner if running\r\n            if (scanOrderSection) scanOrderSection.classList.add('hidden');\r\n            if (manualOrderSection) manualOrderSection.classList.remove('hidden');\r\n            if (orderIdInput) orderIdInput.focus(); // Focus the input field\r\n             if (scannedOrderIdEl) scannedOrderIdEl.textContent = ''; // Clear scanned info\r\n        });\r\n    } else { console.error(\"Toggle Manual Input button not found.\"); }\r\n\r\n    // Toggle Scanner Button (from Manual section)\r\n    if (toggleScanInputBtn) {\r\n        toggleScanInputBtn.addEventListener('click', () => {\r\n             console.log(\"Toggle Scan Input button clicked.\");\r\n             if (manualOrderSection) manualOrderSection.classList.add('hidden');\r\n             if (scanOrderSection) scanOrderSection.classList.remove('hidden');\r\n              if (scannedOrderIdEl) scannedOrderIdEl.textContent = ''; // Clear scanned info\r\n        });\r\n    } else { console.error(\"Toggle Scan Input button not found.\"); }\r\n\r\n    // Manual Load Button\r\n    if (loadManualOrderBtn) {\r\n        loadManualOrderBtn.addEventListener('click', () => {\r\n            console.log(\"Load Manual Order button clicked.\");\r\n            const orderId = orderIdInput.value;\r\n            fetchNextTask(orderId); // Call fetch with manually entered ID\r\n        });\r\n         // Allow submitting manual input with Enter key\r\n        if(orderIdInput) {\r\n            orderIdInput.addEventListener('keypress', (event) => {\r\n                if (event.key === 'Enter') {\r\n                    event.preventDefault(); // Prevent form submission\r\n                    console.log(\"Enter key pressed in manual order input.\");\r\n                    fetchNextTask(orderIdInput.value);\r\n                }\r\n            });\r\n        }\r\n    } else { console.error(\"Load Manual Order button not found.\"); }\r\n\r\n\r\n    // --- Initial State ---\r\n    resetUI(); // Ensure UI starts clean\r\n\r\n}); // End DOMContentLoaded\r\n"],"file":"mobile_picker.js"}