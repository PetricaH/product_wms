{"version":3,"names":[],"mappings":"","sources":["transactions.js"],"sourcesContent":["// JavaScript functions for Transaction Details API integration\r\n\r\n/**\r\n * Fetch transaction details from API\r\n * @param {number} transactionId - Transaction ID\r\n * @param {boolean} fullDetails - Whether to fetch full details with items\r\n * @param {boolean} includeAudit - Whether to include audit trail\r\n * @returns {Promise<Object>} Transaction details\r\n */\r\nasync function fetchTransactionDetails(transactionId, fullDetails = true, includeAudit = false) {\r\n    try {\r\n        const params = new URLSearchParams({\r\n            id: transactionId,\r\n            full: fullDetails ? '1' : '0',\r\n            audit: includeAudit ? '1' : '0'\r\n        });\r\n        \r\n        const response = await fetch(`api/transaction_details.php?${params}`);\r\n        \r\n        if (!response.ok) {\r\n            const errorData = await response.json();\r\n            throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\r\n        }\r\n        \r\n        return await response.json();\r\n    } catch (error) {\r\n        console.error('Error fetching transaction details:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n/**\r\n * Display transaction details in a modal\r\n * @param {number} transactionId - Transaction ID\r\n */\r\nasync function showTransactionDetails(transactionId) {\r\n    try {\r\n        // Show loading state\r\n        const modal = document.getElementById('transactionDetailsModal');\r\n        const content = document.getElementById('transactionDetailsContent');\r\n        \r\n        content.innerHTML = `\r\n            <div class=\"loading-state\">\r\n                <span class=\"material-symbols-outlined rotating\">sync</span>\r\n                <p>Se încarcă detaliile tranzacției...</p>\r\n            </div>\r\n        `;\r\n        modal.style.display = 'block';\r\n        \r\n        // Fetch transaction details\r\n        const transaction = await fetchTransactionDetails(transactionId, true, true);\r\n        \r\n        // Generate and display transaction details HTML\r\n        content.innerHTML = generateTransactionDetailsHtml(transaction);\r\n        \r\n    } catch (error) {\r\n        console.error('Error showing transaction details:', error);\r\n        \r\n        const content = document.getElementById('transactionDetailsContent');\r\n        content.innerHTML = `\r\n            <div class=\"error-state\">\r\n                <span class=\"material-symbols-outlined\">error</span>\r\n                <p>Eroare la încărcarea detaliilor: ${error.message}</p>\r\n                <button onclick=\"closeDetailsModal()\" class=\"btn btn-secondary\">Închide</button>\r\n            </div>\r\n        `;\r\n    }\r\n}\r\n\r\n/**\r\n * Load transaction for editing\r\n * @param {number} transactionId - Transaction ID\r\n */\r\nasync function editTransaction(transactionId) {\r\n    try {\r\n        // Fetch basic transaction details\r\n        const transaction = await fetchTransactionDetails(transactionId, false, false);\r\n        \r\n        // Populate edit form\r\n        populateEditForm(transaction);\r\n        \r\n        // Show edit modal\r\n        document.getElementById('editTransactionModal').style.display = 'block';\r\n        \r\n    } catch (error) {\r\n        console.error('Error loading transaction for edit:', error);\r\n        alert('Eroare la încărcarea tranzacției pentru editare: ' + error.message);\r\n    }\r\n}\r\n\r\n/**\r\n * Populate edit form with transaction data\r\n * @param {Object} transaction - Transaction data\r\n */\r\nfunction populateEditForm(transaction) {\r\n    const form = document.getElementById('editTransactionForm');\r\n    if (!form) return;\r\n    \r\n    // Populate form fields\r\n    const fields = [\r\n        'transaction_type', 'amount', 'tax_amount', 'net_amount', \r\n        'currency', 'description', 'customer_name', 'supplier_name',\r\n        'invoice_date', 'series', 'status'\r\n    ];\r\n    \r\n    fields.forEach(fieldName => {\r\n        const field = form.querySelector(`[name=\"${fieldName}\"]`);\r\n        if (field && transaction[fieldName] !== undefined) {\r\n            field.value = transaction[fieldName];\r\n        }\r\n    });\r\n    \r\n    // Set transaction ID for update\r\n    const idField = form.querySelector('[name=\"transaction_id\"]');\r\n    if (idField) {\r\n        idField.value = transaction.id;\r\n    }\r\n}\r\n\r\n/**\r\n * Enhanced transaction details HTML generator\r\n * @param {Object} transaction - Transaction data\r\n * @returns {string} HTML string\r\n */\r\nfunction generateTransactionDetailsHtml(transaction) {\r\n    // Status icons mapping\r\n    const statusIcons = {\r\n        'pending': 'schedule',\r\n        'processing': 'sync', \r\n        'completed': 'check_circle',\r\n        'failed': 'error',\r\n        'cancelled': 'cancel'\r\n    };\r\n    \r\n    // Generate items table\r\n    let itemsHtml = '';\r\n    if (transaction.items && transaction.items.length > 0) {\r\n        itemsHtml = `\r\n            <div class=\"detail-section\">\r\n                <h4><span class=\"material-symbols-outlined\">inventory_2</span> Articole</h4>\r\n                <div class=\"table-responsive\">\r\n                    <table class=\"table table-sm\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Produs</th>\r\n                                <th class=\"text-center\">Cantitate</th>\r\n                                <th class=\"text-right\">Preț unitar</th>\r\n                                <th class=\"text-center\">TVA (%)</th>\r\n                                <th class=\"text-center\">Disc. (%)</th>\r\n                                <th class=\"text-right\">Total</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            ${transaction.items.map(item => `\r\n                                <tr>\r\n                                    <td>\r\n                                        <strong>${item.sku || 'N/A'}</strong><br>\r\n                                        <small class=\"text-muted\">${item.product_name || 'Produs necunoscut'}</small>\r\n                                    </td>\r\n                                    <td class=\"text-center\">${parseFloat(item.quantity || 0).toFixed(3)} ${item.unit_of_measure || 'buc'}</td>\r\n                                    <td class=\"text-right\">${parseFloat(item.unit_price || 0).toFixed(2)} ${transaction.currency}</td>\r\n                                    <td class=\"text-center\">${parseFloat(item.tax_percent || 0).toFixed(2)}%</td>\r\n                                    <td class=\"text-center\">${parseFloat(item.discount_percent || 0).toFixed(2)}%</td>\r\n                                    <td class=\"text-right\"><strong>${parseFloat(item.total_amount || item.line_total || 0).toFixed(2)} ${transaction.currency}</strong></td>\r\n                                </tr>\r\n                            `).join('')}\r\n                        </tbody>\r\n                        <tfoot>\r\n                            <tr class=\"table-totals\">\r\n                                <td colspan=\"5\" class=\"text-right\"><strong>Subtotal:</strong></td>\r\n                                <td class=\"text-right\"><strong>${parseFloat(transaction.calculated_subtotal || transaction.amount - transaction.tax_amount).toFixed(2)} ${transaction.currency}</strong></td>\r\n                            </tr>\r\n                            <tr class=\"table-totals\">\r\n                                <td colspan=\"5\" class=\"text-right\"><strong>TVA:</strong></td>\r\n                                <td class=\"text-right\"><strong>${parseFloat(transaction.calculated_tax || transaction.tax_amount).toFixed(2)} ${transaction.currency}</strong></td>\r\n                            </tr>\r\n                            <tr class=\"table-totals\">\r\n                                <td colspan=\"5\" class=\"text-right\"><strong>Total:</strong></td>\r\n                                <td class=\"text-right\"><strong>${parseFloat(transaction.calculated_total || transaction.amount).toFixed(2)} ${transaction.currency}</strong></td>\r\n                            </tr>\r\n                        </tfoot>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        `;\r\n    }\r\n    \r\n    // Generate SmartBill sync info\r\n    let smartbillHtml = '';\r\n    if (transaction.smartbill_sync || transaction.smartbill_doc_number) {\r\n        const syncStatus = transaction.sync_status || (transaction.smartbill_doc_number ? 'synced' : 'not_synced');\r\n        const syncStatusClass = syncStatus === 'synced' ? 'success' : (syncStatus === 'failed' ? 'danger' : 'warning');\r\n        \r\n        smartbillHtml = `\r\n            <div class=\"detail-section\">\r\n                <h4><span class=\"material-symbols-outlined\">cloud_sync</span> SmartBill</h4>\r\n                <div class=\"smartbill-info\">\r\n                    <p><strong>Status sincronizare:</strong> \r\n                        <span class=\"badge badge-${syncStatusClass}\">${syncStatus}</span>\r\n                    </p>\r\n                    ${transaction.smartbill_doc_number ? `\r\n                        <p><strong>Document SmartBill:</strong> ${transaction.smartbill_doc_type || 'N/A'} #${transaction.smartbill_doc_number}</p>\r\n                    ` : ''}\r\n                    ${transaction.sync_date ? `\r\n                        <p><strong>Data sincronizării:</strong> ${new Date(transaction.sync_date).toLocaleString('ro-RO')}</p>\r\n                    ` : ''}\r\n                    ${transaction.sync_message ? `\r\n                        <p><strong>Mesaj:</strong> <em>${transaction.sync_message}</em></p>\r\n                    ` : ''}\r\n                </div>\r\n            </div>\r\n        `;\r\n    }\r\n    \r\n    // Generate audit trail\r\n    let auditHtml = '';\r\n    if (transaction.audit_trail && transaction.audit_trail.length > 0) {\r\n        auditHtml = `\r\n            <div class=\"detail-section\">\r\n                <h4><span class=\"material-symbols-outlined\">history</span> Istoric modificări</h4>\r\n                <div class=\"audit-trail\">\r\n                    ${transaction.audit_trail.map(entry => `\r\n                        <div class=\"audit-entry\">\r\n                            <div class=\"audit-header\">\r\n                                <strong>${entry.action_type}</strong>\r\n                                <span class=\"audit-time\">${entry.created_at_formatted}</span>\r\n                            </div>\r\n                            <div class=\"audit-details\">\r\n                                <small>\r\n                                    <strong>Utilizator:</strong> ${entry.user_display || 'System'}<br>\r\n                                    ${entry.old_value ? `<strong>Valoare veche:</strong> ${entry.old_value}<br>` : ''}\r\n                                    ${entry.new_value ? `<strong>Valoare nouă:</strong> ${entry.new_value}<br>` : ''}\r\n                                    ${entry.description ? `<strong>Descriere:</strong> ${entry.description}` : ''}\r\n                                </small>\r\n                            </div>\r\n                        </div>\r\n                    `).join('')}\r\n                </div>\r\n            </div>\r\n        `;\r\n    }\r\n    \r\n    return `\r\n        <div class=\"transaction-details\">\r\n            <div class=\"details-header\">\r\n                <h3>\r\n                    <span class=\"material-symbols-outlined\">${statusIcons[transaction.status] || 'description'}</span>\r\n                    Tranzacția #${transaction.id}\r\n                </h3>\r\n                <span class=\"status-badge status-${transaction.status}\">\r\n                    ${transaction.status_label || transaction.status}\r\n                </span>\r\n            </div>\r\n            \r\n            <div class=\"details-grid\">\r\n                <div class=\"detail-section\">\r\n                    <h4><span class=\"material-symbols-outlined\">info</span> Informații generale</h4>\r\n                    <div class=\"info-grid\">\r\n                        <p><strong>Tip tranzacție:</strong> ${transaction.type_label || transaction.transaction_type}</p>\r\n                        <p><strong>Referință:</strong> ${transaction.reference_type_label || transaction.reference_type} \r\n                           ${transaction.reference_id ? `#${transaction.reference_id}` : ''}</p>\r\n                        <p><strong>Data creării:</strong> ${new Date(transaction.created_at).toLocaleString('ro-RO')}</p>\r\n                        <p><strong>Ultima actualizare:</strong> ${new Date(transaction.updated_at).toLocaleString('ro-RO')}</p>\r\n                        ${transaction.description ? `<p><strong>Descriere:</strong> ${transaction.description}</p>` : ''}\r\n                    </div>\r\n                </div>\r\n                \r\n                <div class=\"detail-section\">\r\n                    <h4><span class=\"material-symbols-outlined\">person</span> Părți implicate</h4>\r\n                    <div class=\"info-grid\">\r\n                        ${transaction.customer_name ? `<p><strong>Client:</strong> ${transaction.customer_name}</p>` : ''}\r\n                        ${transaction.supplier_name ? `<p><strong>Furnizor:</strong> ${transaction.supplier_name}</p>` : ''}\r\n                        ${transaction.party_name ? `<p><strong>Partea:</strong> ${transaction.party_name}</p>` : ''}\r\n                        ${transaction.invoice_date ? `<p><strong>Data facturii:</strong> ${transaction.invoice_date}</p>` : ''}\r\n                        ${transaction.series ? `<p><strong>Serie:</strong> ${transaction.series}</p>` : ''}\r\n                    </div>\r\n                </div>\r\n                \r\n                <div class=\"detail-section\">\r\n                    <h4><span class=\"material-symbols-outlined\">payments</span> Valori financiare</h4>\r\n                    <div class=\"amount-details\">\r\n                        <div class=\"amount-row\">\r\n                            <span>Sumă netă:</span>\r\n                            <strong>${parseFloat(transaction.net_amount || 0).toFixed(2)} ${transaction.currency}</strong>\r\n                        </div>\r\n                        <div class=\"amount-row\">\r\n                            <span>TVA:</span>\r\n                            <strong>${parseFloat(transaction.tax_amount || 0).toFixed(2)} ${transaction.currency}</strong>\r\n                        </div>\r\n                        <div class=\"amount-row total\">\r\n                            <span>Total:</span>\r\n                            <strong>${parseFloat(transaction.amount || 0).toFixed(2)} ${transaction.currency}</strong>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n            ${itemsHtml}\r\n            ${smartbillHtml}\r\n            ${auditHtml}\r\n            \r\n            <div class=\"details-actions\">\r\n                <button onclick=\"closeDetailsModal()\" class=\"btn btn-secondary\">\r\n                    <span class=\"material-symbols-outlined\">close</span> Închide\r\n                </button>\r\n                ${transaction.status === 'pending' || transaction.status === 'failed' ? `\r\n                    <button onclick=\"retryTransaction(${transaction.id})\" class=\"btn btn-warning\">\r\n                        <span class=\"material-symbols-outlined\">replay</span> Reîncearcare\r\n                    </button>\r\n                ` : ''}\r\n                ${transaction.status === 'pending' ? `\r\n                    <button onclick=\"cancelTransaction(${transaction.id})\" class=\"btn btn-danger\">\r\n                        <span class=\"material-symbols-outlined\">cancel</span> Anulare\r\n                    </button>\r\n                ` : ''}\r\n                ${transaction.status === 'completed' && !transaction.smartbill_doc_number ? `\r\n                    <button onclick=\"syncNow(${transaction.id})\" class=\"btn btn-primary\">\r\n                        <span class=\"material-symbols-outlined\">cloud_sync</span> Sincronizare SmartBill\r\n                    </button>\r\n                ` : ''}\r\n            </div>\r\n        </div>\r\n    `;\r\n}\r\n\r\n/**\r\n * Close transaction details modal\r\n */\r\nfunction closeDetailsModal() {\r\n    const modal = document.getElementById('transactionDetailsModal');\r\n    if (modal) {\r\n        modal.style.display = 'none';\r\n    }\r\n}\r\n\r\n/**\r\n * Refresh transaction data in current view\r\n * @param {number} transactionId - Optional specific transaction to refresh\r\n */\r\nasync function refreshTransactionData(transactionId = null) {\r\n    try {\r\n        if (transactionId) {\r\n            // Refresh specific transaction row\r\n            const row = document.querySelector(`tr[data-transaction-id=\"${transactionId}\"]`);\r\n            if (row) {\r\n                const transaction = await fetchTransactionDetails(transactionId, false);\r\n                updateTransactionRow(row, transaction);\r\n            }\r\n        } else {\r\n            // Refresh entire page/table\r\n            location.reload();\r\n        }\r\n    } catch (error) {\r\n        console.error('Error refreshing transaction data:', error);\r\n    }\r\n}\r\n\r\n/**\r\n * Update transaction row with new data\r\n * @param {HTMLElement} row - Table row element\r\n * @param {Object} transaction - Updated transaction data\r\n */\r\nfunction updateTransactionRow(row, transaction) {\r\n    // Update status badge\r\n    const statusBadge = row.querySelector('.status-badge');\r\n    if (statusBadge) {\r\n        statusBadge.className = `status-badge status-${transaction.status}`;\r\n        statusBadge.textContent = transaction.status_label || transaction.status;\r\n    }\r\n    \r\n    // Update amount if displayed\r\n    const amountCell = row.querySelector('.amount-cell');\r\n    if (amountCell) {\r\n        amountCell.innerHTML = `\r\n            <div class=\"amount-info\">\r\n                <strong>${parseFloat(transaction.amount).toFixed(2)} ${transaction.currency}</strong>\r\n                ${transaction.tax_amount ? `<small>TVA: ${parseFloat(transaction.tax_amount).toFixed(2)} ${transaction.currency}</small>` : ''}\r\n            </div>\r\n        `;\r\n    }\r\n}\r\n\r\n// Export functions for global use\r\nwindow.fetchTransactionDetails = fetchTransactionDetails;\r\nwindow.showTransactionDetails = showTransactionDetails;\r\nwindow.editTransaction = editTransaction;\r\nwindow.closeDetailsModal = closeDetailsModal;\r\nwindow.refreshTransactionData = refreshTransactionData;"],"file":"transactions.js"}