{"version":3,"names":[],"mappings":"","sources":["mobile_receiving.js"],"sourcesContent":["// File: scripts/mobile_receiving.js\r\n// Mobile Receiving Interface for WMS\r\n// Production-ready with real API integration\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    console.log(\"Mobile Receiving Interface Loaded\");\r\n\r\n    // --- Configuration ---\r\n    const GET_DOCUMENT_API_URL = '/api/receiving/get_document.php';\r\n    const VERIFY_PRODUCT_API_URL = '/api/receiving/verify_product.php';\r\n    const ADD_ITEM_API_URL = '/api/receiving/add_item.php';\r\n    const COMPLETE_RECEIPT_API_URL = '/api/receiving/complete_receipt.php';\r\n    const GET_LOCATIONS_API_URL = '/api/receiving/get_locations.php';\r\n\r\n    // --- DOM Elements ---\r\n    // Document Input\r\n    const scanDocumentBtn = document.getElementById('scan-document-btn');\r\n    const toggleManualDocumentBtn = document.getElementById('toggle-manual-document-btn');\r\n    const toggleScanDocumentBtn = document.getElementById('toggle-scan-document-btn');\r\n    const manualDocumentSection = document.getElementById('manual-document-section');\r\n    const documentNumberInput = document.getElementById('document-number-input');\r\n    const loadDocumentBtn = document.getElementById('load-document-btn');\r\n    const scannedDocumentInfo = document.getElementById('scanned-document-info');\r\n\r\n    // Scanner\r\n    const scannerContainer = document.getElementById('scanner-container');\r\n    const readerDiv = document.getElementById('reader');\r\n    const stopScanBtn = document.getElementById('stop-scan-btn');\r\n\r\n    // Product Scanning\r\n    const scanProductBtn = document.getElementById('scan-product-btn');\r\n    const toggleManualProductBtn = document.getElementById('toggle-manual-product-btn');\r\n    const toggleScanProductBtn = document.getElementById('toggle-scan-product-btn');\r\n    const manualProductSection = document.getElementById('manual-product-section');\r\n    const productSkuInput = document.getElementById('product-sku-input');\r\n    const verifyProductBtn = document.getElementById('verify-product-btn');\r\n\r\n    // Steps\r\n    const step1 = document.getElementById('step1');\r\n    const step2 = document.getElementById('step2');\r\n    const step3 = document.getElementById('step3');\r\n    const step4 = document.getElementById('step4');\r\n\r\n    // Document Details\r\n    const docNumberEl = document.getElementById('doc-number');\r\n    const supplierNameEl = document.getElementById('supplier-name');\r\n    const documentDateEl = document.getElementById('document-date');\r\n    const documentStatusEl = document.getElementById('document-status');\r\n    const startReceivingBtn = document.getElementById('start-receiving-btn');\r\n\r\n    // Progress\r\n    const totalItemsCountEl = document.getElementById('total-items-count');\r\n    const receivedItemsCountEl = document.getElementById('received-items-count');\r\n    const totalItemsDisplayEl = document.getElementById('total-items-display');\r\n    const progressFillEl = document.getElementById('progress-fill');\r\n\r\n    // Current Item\r\n    const currentItemNameEl = document.getElementById('current-item-name');\r\n    const currentItemSkuEl = document.getElementById('current-item-sku');\r\n    const currentItemExpectedEl = document.getElementById('current-item-expected');\r\n\r\n    // Receiving Details\r\n    const receivingDetailsSection = document.getElementById('receiving-details-section');\r\n    const receivedQuantityInput = document.getElementById('received-quantity');\r\n    const storageLocationSelect = document.getElementById('storage-location');\r\n    const batchNumberInput = document.getElementById('batch-number');\r\n    const expiryDateInput = document.getElementById('expiry-date');\r\n    const confirmReceiveBtn = document.getElementById('confirm-receive-btn');\r\n\r\n    // Completion\r\n    const finalDocumentNumberEl = document.getElementById('final-document-number');\r\n    const finalItemsReceivedEl = document.getElementById('final-items-received');\r\n    const completionDateEl = document.getElementById('completion-date');\r\n    const generateNirBtn = document.getElementById('generate-nir-btn');\r\n    const newReceivingBtn = document.getElementById('new-receiving-btn');\r\n\r\n    // Messages\r\n    const messageArea = document.getElementById('message-area');\r\n    const allDoneMessage = document.getElementById('all-done-message');\r\n    const loadingOverlay = document.getElementById('loading-overlay');\r\n\r\n    // --- State Variables ---\r\n    let html5QrCode;\r\n    let currentScanMode = 'document'; // 'document' or 'product'\r\n    let currentDocument = null;\r\n    let currentItemIndex = 0;\r\n    let receivedItems = [];\r\n\r\n    // --- Utility Functions ---\r\n    function showLoading() {\r\n        if (loadingOverlay) loadingOverlay.classList.remove('hidden');\r\n    }\r\n\r\n    function hideLoading() {\r\n        if (loadingOverlay) loadingOverlay.classList.add('hidden');\r\n    }\r\n\r\n    function showMessage(message, type = 'info') {\r\n        if (!messageArea) return;\r\n        \r\n        const messageEl = document.createElement('div');\r\n        messageEl.className = `message ${type}`;\r\n        messageEl.innerHTML = `\r\n            <span class=\"material-symbols-outlined\">\r\n                ${type === 'success' ? 'check_circle' : \r\n                  type === 'error' ? 'error' : \r\n                  type === 'warning' ? 'warning' : 'info'}\r\n            </span>\r\n            ${message}\r\n        `;\r\n        \r\n        messageArea.appendChild(messageEl);\r\n        \r\n        // Auto-remove after 5 seconds\r\n        setTimeout(() => {\r\n            if (messageEl.parentNode) {\r\n                messageEl.parentNode.removeChild(messageEl);\r\n            }\r\n        }, 5000);\r\n    }\r\n\r\n    function showStep(stepNumber) {\r\n        [step1, step2, step3, step4].forEach(step => {\r\n            if (step) step.classList.add('hidden');\r\n        });\r\n        \r\n        const targetStep = document.getElementById(`step${stepNumber}`);\r\n        if (targetStep) targetStep.classList.remove('hidden');\r\n    }\r\n\r\n    function resetUI() {\r\n        currentDocument = null;\r\n        currentItemIndex = 0;\r\n        receivedItems = [];\r\n        \r\n        // Reset form fields\r\n        if (documentNumberInput) documentNumberInput.value = '';\r\n        if (productSkuInput) productSkuInput.value = '';\r\n        if (receivedQuantityInput) receivedQuantityInput.value = '';\r\n        if (batchNumberInput) batchNumberInput.value = '';\r\n        if (expiryDateInput) expiryDateInput.value = '';\r\n        if (storageLocationSelect) storageLocationSelect.value = '';\r\n        \r\n        // Hide sections\r\n        if (manualDocumentSection) manualDocumentSection.classList.add('hidden');\r\n        if (manualProductSection) manualProductSection.classList.add('hidden');\r\n        if (receivingDetailsSection) receivingDetailsSection.classList.add('hidden');\r\n        if (allDoneMessage) allDoneMessage.classList.add('hidden');\r\n        \r\n        // Clear messages\r\n        if (messageArea) messageArea.innerHTML = '';\r\n        if (scannedDocumentInfo) scannedDocumentInfo.textContent = '';\r\n        \r\n        showStep(1);\r\n    }\r\n\r\n    // --- API Functions ---\r\n    async function fetchDocumentDetails(documentNumber) {\r\n        if (!documentNumber || String(documentNumber).trim() === '') {\r\n            showMessage('Număr document invalid.', 'error');\r\n            return;\r\n        }\r\n\r\n        const trimmedDocNumber = String(documentNumber).trim();\r\n        console.log(`Fetching document details for: ${trimmedDocNumber}`);\r\n\r\n        if (scannedDocumentInfo) {\r\n            scannedDocumentInfo.textContent = `Se încarcă documentul: ${trimmedDocNumber}`;\r\n        }\r\n\r\n        showLoading();\r\n\r\n        try {\r\n            const response = await fetch(`${GET_DOCUMENT_API_URL}?document_number=${encodeURIComponent(trimmedDocNumber)}`);\r\n            \r\n            if (!response.ok) {\r\n                let errorMessage = `HTTP error ${response.status}`;\r\n                try {\r\n                    const errorData = await response.json();\r\n                    errorMessage = errorData.message || errorMessage;\r\n                } catch (err) {\r\n                    // Use default error message\r\n                }\r\n                throw new Error(errorMessage);\r\n            }\r\n\r\n            const result = await response.json();\r\n            console.log(\"Document fetch result:\", result);\r\n\r\n            if (result.status === 'success' && result.data) {\r\n                currentDocument = result.data;\r\n                displayDocumentDetails();\r\n                loadStorageLocations();\r\n                showStep(2);\r\n                showMessage('Document încărcat cu succes!', 'success');\r\n                \r\n                if (scannedDocumentInfo) {\r\n                    scannedDocumentInfo.textContent = `Document încărcat: ${trimmedDocNumber}`;\r\n                }\r\n            } else {\r\n                const errorMsg = result.message || `Document '${trimmedDocNumber}' nu a fost găsit.`;\r\n                showMessage(errorMsg, 'error');\r\n                \r\n                if (scannedDocumentInfo) {\r\n                    scannedDocumentInfo.textContent = `Eroare încărcare document: ${trimmedDocNumber}`;\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error('Document fetch error:', error);\r\n            showMessage(`Eroare: ${error.message || 'Eroare de rețea.'}`, 'error');\r\n            \r\n            if (scannedDocumentInfo) {\r\n                scannedDocumentInfo.textContent = `Eroare încărcare document: ${trimmedDocNumber}`;\r\n            }\r\n        } finally {\r\n            hideLoading();\r\n        }\r\n    }\r\n\r\n    async function loadStorageLocations() {\r\n        try {\r\n            const response = await fetch(GET_LOCATIONS_API_URL);\r\n            \r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error ${response.status}`);\r\n            }\r\n\r\n            const result = await response.json();\r\n            \r\n            if (result.status === 'success' && result.data) {\r\n                populateLocationSelect(result.data);\r\n            } else {\r\n                console.warn('No locations data received');\r\n                // Add default option if no locations available\r\n                if (storageLocationSelect) {\r\n                    storageLocationSelect.innerHTML = '<option value=\"\">Nu sunt locații disponibile</option>';\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error('Error loading locations:', error);\r\n            showMessage('Eroare la încărcarea locațiilor de depozitare.', 'warning');\r\n        }\r\n    }\r\n\r\n    function populateLocationSelect(locations) {\r\n        if (!storageLocationSelect) return;\r\n        \r\n        storageLocationSelect.innerHTML = '<option value=\"\">Selectează locația...</option>';\r\n        \r\n        locations.forEach(location => {\r\n            const option = document.createElement('option');\r\n            option.value = location.id;\r\n            option.textContent = `${location.location_code} - ${location.description || location.zone}`;\r\n            storageLocationSelect.appendChild(option);\r\n        });\r\n    }\r\n\r\n    async function verifyProduct() {\r\n        const enteredSku = productSkuInput ? productSkuInput.value.trim().toUpperCase() : '';\r\n        \r\n        if (!enteredSku) {\r\n            showMessage('Introduceți SKU-ul produsului!', 'error');\r\n            return;\r\n        }\r\n\r\n        if (!currentDocument || currentItemIndex >= currentDocument.items.length) {\r\n            showMessage('Eroare: Nu există articole de procesat.', 'error');\r\n            return;\r\n        }\r\n\r\n        const currentItem = currentDocument.items[currentItemIndex];\r\n        \r\n        showLoading();\r\n\r\n        try {\r\n            const response = await fetch(VERIFY_PRODUCT_API_URL, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    sku: enteredSku,\r\n                    expected_sku: currentItem.sku,\r\n                    document_id: currentDocument.id,\r\n                    item_id: currentItem.id\r\n                })\r\n            });\r\n\r\n            if (!response.ok) {\r\n                let errorMessage = `HTTP error ${response.status}`;\r\n                try {\r\n                    const errorData = await response.json();\r\n                    errorMessage = errorData.message || errorMessage;\r\n                } catch (err) {\r\n                    // Use default error message\r\n                }\r\n                throw new Error(errorMessage);\r\n            }\r\n\r\n            const result = await response.json();\r\n            console.log(\"Product verification result:\", result);\r\n\r\n            if (result.status === 'success') {\r\n                showMessage('Produs verificat cu succes!', 'success');\r\n                \r\n                // Set default quantity\r\n                if (receivedQuantityInput) {\r\n                    receivedQuantityInput.value = currentItem.expected_quantity || 1;\r\n                    receivedQuantityInput.max = currentItem.expected_quantity || 999;\r\n                }\r\n                \r\n                // Show receiving details section\r\n                if (receivingDetailsSection) {\r\n                    receivingDetailsSection.classList.remove('hidden');\r\n                }\r\n                \r\n                // Focus on quantity input\r\n                if (receivedQuantityInput) {\r\n                    receivedQuantityInput.focus();\r\n                }\r\n            } else {\r\n                const errorMsg = result.message || `SKU greșit! Se așteaptă: ${currentItem.sku}`;\r\n                showMessage(errorMsg, 'error');\r\n            }\r\n        } catch (error) {\r\n            console.error('Product verification error:', error);\r\n            showMessage(`Eroare: ${error.message || 'Eroare de verificare produs.'}`, 'error');\r\n        } finally {\r\n            hideLoading();\r\n        }\r\n    }\r\n\r\n    async function confirmReceiveItem() {\r\n        const quantity = parseInt(receivedQuantityInput.value);\r\n        const locationId = parseInt(storageLocationSelect.value);\r\n        const batchNumber = batchNumberInput.value.trim();\r\n        const expiryDate = expiryDateInput.value;\r\n\r\n        // Validation\r\n        if (!quantity || quantity <= 0) {\r\n            showMessage('Introduceți o cantitate validă!', 'error');\r\n            if (receivedQuantityInput) receivedQuantityInput.focus();\r\n            return;\r\n        }\r\n\r\n        if (!locationId) {\r\n            showMessage('Selectați locația de depozitare!', 'error');\r\n            if (storageLocationSelect) storageLocationSelect.focus();\r\n            return;\r\n        }\r\n\r\n        const currentItem = currentDocument.items[currentItemIndex];\r\n\r\n        if (quantity > currentItem.expected_quantity) {\r\n            showMessage(`Cantitatea nu poate fi mai mare decât ${currentItem.expected_quantity}!`, 'error');\r\n            if (receivedQuantityInput) receivedQuantityInput.focus();\r\n            return;\r\n        }\r\n\r\n        showLoading();\r\n\r\n        const payload = {\r\n            document_id: currentDocument.id,\r\n            item_id: currentItem.id,\r\n            product_id: currentItem.product_id,\r\n            sku: currentItem.sku,\r\n            received_quantity: quantity,\r\n            location_id: locationId,\r\n            batch_number: batchNumber || null,\r\n            expiry_date: expiryDate || null\r\n        };\r\n\r\n        console.log(\"Confirm receive payload:\", payload);\r\n\r\n        try {\r\n            const response = await fetch(ADD_ITEM_API_URL, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json'\r\n                },\r\n                body: JSON.stringify(payload)\r\n            });\r\n\r\n            if (!response.ok) {\r\n                let errorMessage = `HTTP error ${response.status}`;\r\n                try {\r\n                    const errorData = await response.json();\r\n                    errorMessage = errorData.message || errorMessage;\r\n                } catch (err) {\r\n                    // Use default error message\r\n                }\r\n                throw new Error(errorMessage);\r\n            }\r\n\r\n            const result = await response.json();\r\n            console.log(\"Add item result:\", result);\r\n\r\n            if (result.status === 'success') {\r\n                // Record received item\r\n                receivedItems.push({\r\n                    ...currentItem,\r\n                    received_quantity: quantity,\r\n                    location_id: locationId,\r\n                    batch_number: batchNumber,\r\n                    expiry_date: expiryDate,\r\n                    received_at: new Date().toISOString()\r\n                });\r\n\r\n                showMessage(result.message || 'Articol primit cu succes!', 'success');\r\n\r\n                // Move to next item\r\n                currentItemIndex++;\r\n                updateProgress();\r\n\r\n                // Reset form\r\n                resetReceivingForm();\r\n\r\n                if (currentItemIndex >= currentDocument.items.length) {\r\n                    // All items received\r\n                    completeReceiving();\r\n                } else {\r\n                    // Show next item\r\n                    showCurrentItem();\r\n                }\r\n            } else {\r\n                const errorMsg = result.message || 'Eroare la primirea articolului.';\r\n                showMessage(errorMsg, 'error');\r\n            }\r\n        } catch (error) {\r\n            console.error('Add item error:', error);\r\n            showMessage(`Eroare: ${error.message || 'Eroare de rețea.'}`, 'error');\r\n        } finally {\r\n            hideLoading();\r\n        }\r\n    }\r\n\r\n    async function completeReceiving() {\r\n        showLoading();\r\n\r\n        try {\r\n            const response = await fetch(COMPLETE_RECEIPT_API_URL, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    document_id: currentDocument.id,\r\n                    received_items: receivedItems\r\n                })\r\n            });\r\n\r\n            if (!response.ok) {\r\n                let errorMessage = `HTTP error ${response.status}`;\r\n                try {\r\n                    const errorData = await response.json();\r\n                    errorMessage = errorData.message || errorMessage;\r\n                } catch (err) {\r\n                    // Use default error message\r\n                }\r\n                throw new Error(errorMessage);\r\n            }\r\n\r\n            const result = await response.json();\r\n            console.log(\"Complete receiving result:\", result);\r\n\r\n            if (result.status === 'success') {\r\n                // Update completion display\r\n                if (finalDocumentNumberEl) {\r\n                    finalDocumentNumberEl.textContent = currentDocument.document_number;\r\n                }\r\n                if (finalItemsReceivedEl) {\r\n                    finalItemsReceivedEl.textContent = receivedItems.length;\r\n                }\r\n                if (completionDateEl) {\r\n                    completionDateEl.textContent = new Date().toLocaleString('ro-RO');\r\n                }\r\n\r\n                showStep(4);\r\n                showMessage('Recepție finalizată cu succes!', 'success');\r\n            } else {\r\n                const errorMsg = result.message || 'Eroare la finalizarea recepției.';\r\n                showMessage(errorMsg, 'error');\r\n            }\r\n        } catch (error) {\r\n            console.error('Complete receiving error:', error);\r\n            showMessage(`Eroare: ${error.message || 'Eroare de finalizare.'}`, 'error');\r\n        } finally {\r\n            hideLoading();\r\n        }\r\n    }\r\n\r\n    // --- Display Functions ---\r\n    function displayDocumentDetails() {\r\n        if (!currentDocument) return;\r\n\r\n        if (docNumberEl) docNumberEl.textContent = currentDocument.document_number;\r\n        if (supplierNameEl) supplierNameEl.textContent = currentDocument.supplier_name;\r\n        if (documentDateEl) documentDateEl.textContent = currentDocument.document_date;\r\n        if (documentStatusEl) documentStatusEl.textContent = currentDocument.status;\r\n\r\n        if (totalItemsCountEl) totalItemsCountEl.textContent = currentDocument.items.length;\r\n        if (totalItemsDisplayEl) totalItemsDisplayEl.textContent = currentDocument.items.length;\r\n\r\n        updateProgress();\r\n    }\r\n\r\n    function updateProgress() {\r\n        const received = receivedItems.length;\r\n        const total = currentDocument ? currentDocument.items.length : 0;\r\n        const percentage = total > 0 ? (received / total) * 100 : 0;\r\n\r\n        if (progressFillEl) progressFillEl.style.width = `${percentage}%`;\r\n        if (receivedItemsCountEl) receivedItemsCountEl.textContent = received;\r\n    }\r\n\r\n    function showCurrentItem() {\r\n        if (!currentDocument || currentItemIndex >= currentDocument.items.length) return;\r\n\r\n        const item = currentDocument.items[currentItemIndex];\r\n        \r\n        if (currentItemNameEl) currentItemNameEl.textContent = item.product_name;\r\n        if (currentItemSkuEl) currentItemSkuEl.textContent = item.sku;\r\n        if (currentItemExpectedEl) currentItemExpectedEl.textContent = item.expected_quantity;\r\n    }\r\n\r\n    function resetReceivingForm() {\r\n        if (productSkuInput) productSkuInput.value = '';\r\n        if (receivedQuantityInput) receivedQuantityInput.value = '';\r\n        if (batchNumberInput) batchNumberInput.value = '';\r\n        if (expiryDateInput) expiryDateInput.value = '';\r\n        if (storageLocationSelect) storageLocationSelect.value = '';\r\n        \r\n        if (manualProductSection) manualProductSection.classList.add('hidden');\r\n        if (receivingDetailsSection) receivingDetailsSection.classList.add('hidden');\r\n    }\r\n\r\n    // --- Scanner Functions ---\r\n    function onScanSuccess(decodedText, decodedResult) {\r\n        console.log(`Scan Success! Mode: ${currentScanMode}, Decoded: ${decodedText}`);\r\n        showMessage(`Scanat: ${decodedText}`, 'success');\r\n        stopScanner();\r\n\r\n        const scannedValue = decodedText.trim();\r\n\r\n        if (currentScanMode === 'document') {\r\n            fetchDocumentDetails(scannedValue);\r\n        } else if (currentScanMode === 'product') {\r\n            if (productSkuInput) {\r\n                productSkuInput.value = scannedValue;\r\n                verifyProduct();\r\n            }\r\n        }\r\n    }\r\n\r\n    function onScanFailure(error) {\r\n        // Usually ignore scanning failures\r\n    }\r\n\r\n    function startScanner() {\r\n        if (typeof Html5Qrcode === 'undefined') {\r\n            showMessage(\"Librăria scanner-ului nu este disponibilă.\", 'error');\r\n            return;\r\n        }\r\n\r\n        if (html5QrCode?.isScanning) {\r\n            console.log(\"Scanner-ul rulează deja.\");\r\n            return;\r\n        }\r\n\r\n        if (!html5QrCode) {\r\n            try {\r\n                html5QrCode = new Html5Qrcode(\"reader\");\r\n            } catch (e) {\r\n                console.error(\"Eroare inițializare scanner:\", e);\r\n                showMessage(\"Eroare inițializare scanner.\", 'error');\r\n                return;\r\n            }\r\n        }\r\n\r\n        const config = {\r\n            fps: 10,\r\n            qrbox: (w, h) => {\r\n                let s = Math.min(w, h) * 0.8;\r\n                return { width: Math.max(s, 200), height: Math.max(s, 200) };\r\n            },\r\n            aspectRatio: 1.0,\r\n            rememberLastUsedCamera: true,\r\n            supportedScanTypes: [Html5QrcodeScanType.SCAN_TYPE_CAMERA]\r\n        };\r\n\r\n        console.log(\"Starting scanner for mode:\", currentScanMode);\r\n        if (scannerContainer) scannerContainer.classList.remove('hidden');\r\n        if (stopScanBtn) stopScanBtn.classList.remove('hidden');\r\n\r\n        const modeText = currentScanMode === 'document' ? 'document' : 'produs';\r\n        showMessage(`Îndreptați camera către ${modeText}...`, 'info');\r\n\r\n        html5QrCode.start(\r\n            { facingMode: \"environment\" },\r\n            config,\r\n            onScanSuccess,\r\n            onScanFailure\r\n        ).catch((err) => {\r\n            console.error(`Scanner start failed (${currentScanMode}):`, err);\r\n            \r\n            let userMsg = `Eroare pornire scanner: ${err}`;\r\n            if (String(err).includes(\"Permission\") || String(err).includes(\"NotAllowed\")) {\r\n                userMsg = \"Acces la cameră refuzat.\";\r\n            } else if (String(err).includes(\"NotFoundError\") || String(err).includes(\"Requested camera\")) {\r\n                userMsg = \"Camera nu a fost găsită.\";\r\n            }\r\n            \r\n            showMessage(userMsg, 'error');\r\n            if (scannerContainer) scannerContainer.classList.add('hidden');\r\n            if (stopScanBtn) stopScanBtn.classList.add('hidden');\r\n        });\r\n    }\r\n\r\n    function stopScanner() {\r\n        if (html5QrCode?.isScanning) {\r\n            console.log(\"Se oprește scanner-ul...\");\r\n            html5QrCode.stop().then(() => {\r\n                console.log(\"Scanner oprit.\");\r\n            }).catch((err) => {\r\n                console.error(\"Eroare oprire scanner:\", err);\r\n            });\r\n        }\r\n        \r\n        if (scannerContainer) scannerContainer.classList.add('hidden');\r\n        if (stopScanBtn) stopScanBtn.classList.add('hidden');\r\n    }\r\n\r\n    // --- Event Listeners ---\r\n\r\n    // Document Input\r\n    if (toggleManualDocumentBtn) {\r\n        toggleManualDocumentBtn.addEventListener('click', () => {\r\n            stopScanner();\r\n            if (manualDocumentSection) manualDocumentSection.classList.remove('hidden');\r\n            if (documentNumberInput) documentNumberInput.focus();\r\n            if (scannedDocumentInfo) scannedDocumentInfo.textContent = '';\r\n        });\r\n    }\r\n\r\n    if (toggleScanDocumentBtn) {\r\n        toggleScanDocumentBtn.addEventListener('click', () => {\r\n            if (manualDocumentSection) manualDocumentSection.classList.add('hidden');\r\n            if (scannedDocumentInfo) scannedDocumentInfo.textContent = '';\r\n        });\r\n    }\r\n\r\n    if (loadDocumentBtn) {\r\n        loadDocumentBtn.addEventListener('click', () => {\r\n            if (documentNumberInput) {\r\n                fetchDocumentDetails(documentNumberInput.value);\r\n            }\r\n        });\r\n    }\r\n\r\n    if (documentNumberInput) {\r\n        documentNumberInput.addEventListener('keypress', (e) => {\r\n            if (e.key === 'Enter') {\r\n                e.preventDefault();\r\n                fetchDocumentDetails(documentNumberInput.value);\r\n            }\r\n        });\r\n    }\r\n\r\n    // Scanner Controls\r\n    if (scanDocumentBtn) {\r\n        scanDocumentBtn.addEventListener('click', () => {\r\n            currentScanMode = 'document';\r\n            startScanner();\r\n        });\r\n    }\r\n\r\n    if (scanProductBtn) {\r\n        scanProductBtn.addEventListener('click', () => {\r\n            currentScanMode = 'product';\r\n            startScanner();\r\n        });\r\n    }\r\n\r\n    if (stopScanBtn) {\r\n        stopScanBtn.addEventListener('click', () => {\r\n            stopScanner();\r\n            showMessage(\"Scanare oprită.\", 'info');\r\n        });\r\n    }\r\n\r\n    // Product Input\r\n    if (toggleManualProductBtn) {\r\n        toggleManualProductBtn.addEventListener('click', () => {\r\n            stopScanner();\r\n            if (manualProductSection) manualProductSection.classList.remove('hidden');\r\n            if (productSkuInput) productSkuInput.focus();\r\n        });\r\n    }\r\n\r\n    if (toggleScanProductBtn) {\r\n        toggleScanProductBtn.addEventListener('click', () => {\r\n            if (manualProductSection) manualProductSection.classList.add('hidden');\r\n        });\r\n    }\r\n\r\n    if (verifyProductBtn) {\r\n        verifyProductBtn.addEventListener('click', verifyProduct);\r\n    }\r\n\r\n    if (productSkuInput) {\r\n        productSkuInput.addEventListener('keypress', (e) => {\r\n            if (e.key === 'Enter') {\r\n                e.preventDefault();\r\n                verifyProduct();\r\n            }\r\n        });\r\n    }\r\n\r\n    // Receiving\r\n    if (startReceivingBtn) {\r\n        startReceivingBtn.addEventListener('click', () => {\r\n            currentItemIndex = 0;\r\n            showCurrentItem();\r\n            showStep(3);\r\n        });\r\n    }\r\n\r\n    if (confirmReceiveBtn) {\r\n        confirmReceiveBtn.addEventListener('click', confirmReceiveItem);\r\n    }\r\n\r\n    if (receivedQuantityInput) {\r\n        receivedQuantityInput.addEventListener('keypress', (e) => {\r\n            if (e.key === 'Enter') {\r\n                e.preventDefault();\r\n                confirmReceiveItem();\r\n            }\r\n        });\r\n    }\r\n\r\n    // Completion\r\n    if (generateNirBtn) {\r\n        generateNirBtn.addEventListener('click', () => {\r\n            // Generate NIR report - implement based on your needs\r\n            showMessage('Funcția de generare NIR va fi implementată.', 'info');\r\n        });\r\n    }\r\n\r\n    if (newReceivingBtn) {\r\n        newReceivingBtn.addEventListener('click', resetUI);\r\n    }\r\n\r\n    // --- Initialize ---\r\n    resetUI();\r\n    console.log(\"Mobile Receiving Interface Ready\");\r\n});"],"file":"mobile_receiving.js"}