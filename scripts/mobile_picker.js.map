{"version":3,"names":[],"mappings":"","sources":["mobile_picker.js"],"sourcesContent":["// File: src/js/pages/mobile_picker.js\r\n// Added html5-qrcode integration\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    console.log(\"DOM Loaded. Initializing script.\");\r\n\r\n    // --- Configuration ---\r\n    const GET_TASK_API_URL = '/api/picking/get_next_task.php';\r\n    const CONFIRM_PICK_API_URL = '/api/picking/confirm_pick.php';\r\n\r\n    // --- DOM Elements ---\r\n    // Removed orderIdInput, loadOrderBtn\r\n    const scanOrderBtn = document.getElementById('scan-order-btn');\r\n    const scannerContainer = document.getElementById('scanner-container');\r\n    const readerDiv = document.getElementById('reader'); // Div where scanner UI goes\r\n    const scannedOrderIdEl = document.getElementById('scanned-order-id');\r\n\r\n    const taskDisplay = document.getElementById('task-display');\r\n    const confirmationArea = document.getElementById('confirmation-area');\r\n    const messageArea = document.getElementById('message-area');\r\n    const allDoneMessage = document.getElementById('all-done-message');\r\n    const quantityPickedInput = document.getElementById('quantity-picked-input');\r\n    const confirmPickBtn = document.getElementById('confirm-pick-btn');\r\n    const loadingOverlay = document.getElementById('loading-overlay');\r\n\r\n    // Task Data Elements\r\n    const productNameEl = document.getElementById('product-name');\r\n    const productSkuEl = document.getElementById('product-sku');\r\n    const locationCodeEl = document.getElementById('location-code');\r\n    const batchNumberEl = document.getElementById('batch-number');\r\n    const inventoryIdEl = document.getElementById('inventory-id');\r\n    const quantityToPickEl = document.getElementById('quantity-to-pick');\r\n    const totalNeededEl = document.getElementById('total-needed');\r\n    const availableInLocationEl = document.getElementById('available-in-location');\r\n\r\n    // Check if essential elements were found\r\n    if (!scanOrderBtn) console.error(\"Error: Scan Order button not found!\");\r\n    if (!readerDiv) console.error(\"Error: Scanner reader div not found!\");\r\n    if (!scannerContainer) console.error(\"Error: Scanner container div not found!\");\r\n    if (!confirmPickBtn) console.error(\"Error: Confirm Pick button not found!\");\r\n    if (!loadingOverlay) console.error(\"Error: Loading overlay not found!\");\r\n    if (!quantityPickedInput) console.error(\"Error: Quantity picked input not found!\");\r\n\r\n    // --- State ---\r\n    let currentTask = null;\r\n    let html5QrCode = null; // To hold the scanner instance\r\n\r\n    // --- Functions ---\r\n\r\n    function showLoading() {\r\n        if (loadingOverlay) loadingOverlay.classList.remove('hidden');\r\n    }\r\n\r\n    function hideLoading() {\r\n        if (loadingOverlay) loadingOverlay.classList.add('hidden');\r\n    }\r\n\r\n    function showMessage(message, isError = false) {\r\n        if (!messageArea) return;\r\n        messageArea.textContent = message;\r\n        messageArea.className = `message-area ${isError ? 'message-area--error' : 'message-area--success'}`;\r\n        setTimeout(() => {\r\n            if (messageArea.textContent === message) {\r\n               messageArea.textContent = '';\r\n               messageArea.className = 'message-area';\r\n            }\r\n        }, 5000);\r\n    }\r\n\r\n    function clearTaskDisplay() {\r\n        if (taskDisplay) taskDisplay.classList.add('hidden');\r\n        if (confirmationArea) confirmationArea.classList.add('hidden');\r\n        if (allDoneMessage) allDoneMessage.classList.add('hidden');\r\n        if (scannedOrderIdEl) scannedOrderIdEl.textContent = ''; // Clear scanned ID display\r\n        const elementsToClear = [productNameEl, productSkuEl, locationCodeEl, batchNumberEl, inventoryIdEl, quantityToPickEl, totalNeededEl, availableInLocationEl];\r\n        elementsToClear.forEach(el => { if (el) el.textContent = ''; });\r\n        if (inventoryIdEl) inventoryIdEl.textContent = '0';\r\n        if (quantityToPickEl) quantityToPickEl.textContent = '0';\r\n        if (totalNeededEl) totalNeededEl.textContent = '0';\r\n        if (availableInLocationEl) availableInLocationEl.textContent = '0';\r\n        if (quantityPickedInput) quantityPickedInput.value = '';\r\n        currentTask = null;\r\n    }\r\n\r\n    function displayTask(taskData) {\r\n        if (!taskData || typeof taskData !== 'object') {\r\n            console.error(\"Invalid task data received:\", taskData);\r\n            showMessage(\"Received invalid task data from server.\", true);\r\n            return;\r\n        }\r\n        currentTask = taskData;\r\n        if (productNameEl) productNameEl.textContent = taskData.product_name || 'N/A';\r\n        if (productSkuEl) productSkuEl.textContent = taskData.product_sku || 'N/A';\r\n        if (locationCodeEl) locationCodeEl.textContent = taskData.location_code || 'N/A';\r\n        if (batchNumberEl) batchNumberEl.textContent = taskData.batch_number || 'None';\r\n        if (inventoryIdEl) inventoryIdEl.textContent = taskData.inventory_id || '0';\r\n        if (quantityToPickEl) quantityToPickEl.textContent = taskData.quantity_to_pick || '0';\r\n        if (totalNeededEl) totalNeededEl.textContent = taskData.total_needed_for_item || '0';\r\n        if (availableInLocationEl) availableInLocationEl.textContent = taskData.available_in_location || '0';\r\n\r\n        if (quantityPickedInput && quantityPickedInput instanceof HTMLInputElement) {\r\n            try {\r\n                quantityPickedInput.value = taskData.quantity_to_pick || '';\r\n                const maxVal = parseInt(taskData.quantity_to_pick, 10);\r\n                if (!isNaN(maxVal)) {\r\n                    quantityPickedInput.max = maxVal.toString();\r\n                } else {\r\n                    quantityPickedInput.removeAttribute('max');\r\n                }\r\n            } catch (e) {\r\n                 console.error(\"Error setting properties on quantityPickedInput:\", e);\r\n                 showMessage(\"Internal UI error setting quantity input.\", true);\r\n            }\r\n        } else {\r\n            console.warn(\"quantityPickedInput not found or is not an input element.\");\r\n        }\r\n\r\n        if (taskDisplay) taskDisplay.classList.remove('hidden');\r\n        if (confirmationArea) confirmationArea.classList.remove('hidden');\r\n        if (allDoneMessage) allDoneMessage.classList.add('hidden');\r\n        if (messageArea) messageArea.textContent = '';\r\n    }\r\n\r\n    async function fetchNextTask(orderId) {\r\n        const numericOrderId = parseInt(orderId, 10);\r\n        // Basic validation - might need adjustment if order IDs are not purely numeric\r\n        if (isNaN(numericOrderId) || numericOrderId <= 0) {\r\n            showMessage(`Invalid Order ID scanned: ${orderId}`, true);\r\n            console.log(\"fetchNextTask aborted: Invalid orderId.\");\r\n            stopScanner(); // Stop scanner if scan was invalid\r\n            return;\r\n        }\r\n\r\n        // Display the scanned ID\r\n        if (scannedOrderIdEl) scannedOrderIdEl.textContent = `Loading Order: ${numericOrderId}`;\r\n\r\n        clearTaskDisplay(); // Clear previous task first\r\n        showLoading();\r\n        if (messageArea) messageArea.textContent = '';\r\n\r\n        try {\r\n            const response = await fetch(`${GET_TASK_API_URL}?order_id=${numericOrderId}`);\r\n             if (!response.ok) {\r\n                let errorMsg = `HTTP error! Status: ${response.status} ${response.statusText}`;\r\n                try {\r\n                    const errorResult = await response.json();\r\n                    errorMsg = errorResult.message || errorMsg;\r\n                } catch (e) { /* Ignore */ }\r\n                throw new Error(errorMsg);\r\n            }\r\n            const result = await response.json();\r\n\r\n            if (result.status === 'success') {\r\n                displayTask(result.data);\r\n                 if (scannedOrderIdEl) scannedOrderIdEl.textContent = `Loaded Order: ${numericOrderId}`;\r\n            } else if (result.status === 'complete') {\r\n                if (taskDisplay) taskDisplay.classList.add('hidden');\r\n                if (confirmationArea) confirmationArea.classList.add('hidden');\r\n                if (allDoneMessage) allDoneMessage.classList.remove('hidden');\r\n                showMessage('Order picking complete!', false);\r\n                 if (scannedOrderIdEl) scannedOrderIdEl.textContent = `Order ${numericOrderId} is complete.`;\r\n            } else {\r\n                const errorMessage = result.message || `API Error: ${result.status}`;\r\n                showMessage(errorMessage, true);\r\n                if (taskDisplay) taskDisplay.classList.add('hidden');\r\n                if (confirmationArea) confirmationArea.classList.add('hidden');\r\n                if (allDoneMessage) allDoneMessage.classList.add('hidden');\r\n                 if (scannedOrderIdEl) scannedOrderIdEl.textContent = `Error loading Order: ${numericOrderId}`;\r\n            }\r\n        } catch (error) {\r\n            console.error('Fetch Task Error Caught:', error);\r\n            showMessage(`Error: ${error.message || 'Network error or invalid response.'}`, true);\r\n            if (taskDisplay) taskDisplay.classList.add('hidden');\r\n            if (confirmationArea) confirmationArea.classList.add('hidden');\r\n            if (allDoneMessage) allDoneMessage.classList.add('hidden');\r\n            if (scannedOrderIdEl) scannedOrderIdEl.textContent = `Error loading Order: ${numericOrderId}`;\r\n        } finally {\r\n            hideLoading();\r\n        }\r\n    }\r\n\r\n    async function confirmPick() {\r\n        if (!currentTask) {\r\n            showMessage('No active task loaded to confirm.', true);\r\n            return;\r\n        }\r\n        const quantity = parseInt(quantityPickedInput.value, 10);\r\n        if (isNaN(quantity) || quantity <= 0) {\r\n            showMessage('Please enter a valid positive quantity picked.', true);\r\n            if (quantityPickedInput) quantityPickedInput.focus();\r\n            return;\r\n        }\r\n        if (quantity > currentTask.quantity_to_pick) {\r\n            showMessage(`Cannot pick more than ${currentTask.quantity_to_pick} from this specific location/batch for this step.`, true);\r\n            if (quantityPickedInput) quantityPickedInput.focus();\r\n            return;\r\n        }\r\n         if (quantity > currentTask.available_in_location) {\r\n             showMessage(`Error: Only ${currentTask.available_in_location} available in this location/batch.`, true);\r\n             if (quantityPickedInput) quantityPickedInput.focus();\r\n             return;\r\n         }\r\n\r\n        showLoading();\r\n        if (messageArea) messageArea.textContent = '';\r\n\r\n        const payload = {\r\n            order_item_id: currentTask.order_item_id,\r\n            inventory_id: currentTask.inventory_id,\r\n            quantity_picked: quantity\r\n        };\r\n\r\n        try {\r\n            const response = await fetch(CONFIRM_PICK_API_URL, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json'\r\n                },\r\n                body: JSON.stringify(payload)\r\n            });\r\n\r\n             if (!response.ok) {\r\n                let errorMsg = `HTTP error! Status: ${response.status} ${response.statusText}`;\r\n                try {\r\n                    const errorResult = await response.json();\r\n                    errorMsg = errorResult.message || errorMsg;\r\n                } catch (e) { /* Ignore */ }\r\n                throw new Error(errorMsg);\r\n            }\r\n            const result = await response.json();\r\n\r\n            if (result.status === 'success') {\r\n                showMessage(result.message || 'Pick confirmed successfully!', false);\r\n                // Re-use the order ID from the current task to fetch the next one\r\n                if (currentTask.order_id) {\r\n                     fetchNextTask(currentTask.order_id); // Fetch next task on success\r\n                } else {\r\n                    console.error(\"Cannot fetch next task: order_id missing from current task data.\");\r\n                    showMessage(\"Pick confirmed, but couldn't fetch next task (missing order ID). Please scan again.\", true);\r\n                    clearTaskDisplay(); // Clear the confirmed task\r\n                }\r\n\r\n            } else {\r\n                const errorMessage = result.message || `API Error: ${result.status}`;\r\n                showMessage(errorMessage, true);\r\n            }\r\n        } catch (error) {\r\n            console.error('Confirm Pick Error Caught:', error);\r\n            showMessage(`Error: ${error.message || 'Network error or invalid response.'}`, true);\r\n        } finally {\r\n            hideLoading();\r\n        }\r\n    }\r\n\r\n    // --- Scanner Functions ---\r\n\r\n    /**\r\n     * Called when a barcode is successfully scanned.\r\n     * @param {string} decodedText - The decoded text from the barcode.\r\n     * @param {object} decodedResult - More detailed result object from the library.\r\n     */\r\n    function onScanSuccess(decodedText, decodedResult) {\r\n        console.log(`Code matched = ${decodedText}`, decodedResult);\r\n        showMessage(`Scanned: ${decodedText}`, false);\r\n        stopScanner(); // Stop scanner after successful scan\r\n\r\n        // --- !!! IMPORTANT: Add validation if needed !!! ---\r\n        // e.g., check if decodedText looks like an order ID format\r\n        // if (!isValidOrderIdFormat(decodedText)) {\r\n        //     showMessage(`Invalid Order ID format scanned: ${decodedText}`, true);\r\n        //     startScanner(); // Optionally restart scanner immediately\r\n        //     return;\r\n        // }\r\n\r\n        // Fetch the task for the scanned order ID\r\n        fetchNextTask(decodedText);\r\n    }\r\n\r\n    /**\r\n     * Called when scanning fails (e.g., camera permission denied, no barcode found).\r\n     * This is often called repeatedly by the library, so keep it minimal.\r\n     * @param {string} error - Error message from the library.\r\n     */\r\n    function onScanFailure(error) {\r\n        // Handle scan failure, usually quietly unless it's a critical error like permissions\r\n        // console.warn(`Code scan error = ${error}`);\r\n        // showMessage(`Scanner error: ${error}`, true); // Can be noisy\r\n    }\r\n\r\n    /**\r\n     * Initializes and starts the barcode scanner.\r\n     */\r\n    function startScanner() {\r\n        // Ensure html5QrCode is available (loaded from CDN)\r\n        if (typeof Html5Qrcode === 'undefined') {\r\n             showMessage(\"Error: Scanner library not loaded.\", true);\r\n             return;\r\n        }\r\n\r\n        // Prevent starting multiple instances\r\n        if (html5QrCode && html5QrCode.isScanning) {\r\n            console.log(\"Scanner already running.\");\r\n            return;\r\n        }\r\n\r\n        // Create a new instance if it doesn't exist\r\n        if (!html5QrCode) {\r\n            html5QrCode = new Html5Qrcode(\"reader\"); // \"reader\" is the ID of the div\r\n        }\r\n\r\n        // Configuration for the scanner\r\n        const config = {\r\n            fps: 10, // Frames per second to attempt scanning\r\n            qrbox: { width: 250, height: 250 }, // Size of the scanning box (optional)\r\n            aspectRatio: 1.0, // Optional aspect ratio\r\n            rememberLastUsedCamera: true, // Try to use the same camera as last time\r\n             supportedScanTypes: [ // Limit scan types if needed\r\n                 Html5QrcodeScanType.SCAN_TYPE_CAMERA\r\n             ]\r\n        };\r\n\r\n        console.log(\"Starting scanner...\");\r\n        if (scannerContainer) scannerContainer.classList.remove('hidden'); // Show the scanner view\r\n        if (messageArea) messageArea.textContent = \"Point camera at Order Barcode...\"; // Prompt user\r\n\r\n        // Start scanning\r\n        html5QrCode.start(\r\n            { facingMode: \"environment\" }, // Prefer back camera\r\n            config,\r\n            onScanSuccess,\r\n            onScanFailure\r\n        ).catch((err) => {\r\n            console.error(\"Failed to start scanner:\", err);\r\n            showMessage(`Error starting scanner: ${err}`, true);\r\n            if (scannerContainer) scannerContainer.classList.add('hidden'); // Hide on error\r\n        });\r\n    }\r\n\r\n     /**\r\n     * Stops the barcode scanner if it's running.\r\n     */\r\n    function stopScanner() {\r\n        if (html5QrCode && html5QrCode.isScanning) {\r\n            console.log(\"Stopping scanner...\");\r\n            html5QrCode.stop().then((ignore) => {\r\n                console.log(\"Scanner stopped successfully.\");\r\n                if (scannerContainer) scannerContainer.classList.add('hidden'); // Hide scanner view\r\n                // Optionally clear the reader div content if needed\r\n                // if (readerDiv) readerDiv.innerHTML = '';\r\n            }).catch((err) => {\r\n                console.error(\"Failed to stop scanner:\", err);\r\n                // Don't necessarily show error to user, but hide container\r\n                 if (scannerContainer) scannerContainer.classList.add('hidden');\r\n            });\r\n        } else {\r\n             // Ensure container is hidden even if scanner wasn't technically running\r\n             if (scannerContainer) scannerContainer.classList.add('hidden');\r\n        }\r\n    }\r\n\r\n\r\n    // --- Event Listeners ---\r\n\r\n    // Attach listener to the Scan Order button\r\n    if (scanOrderBtn) {\r\n        scanOrderBtn.addEventListener('click', () => {\r\n            console.log(\"Scan Order button clicked.\");\r\n            clearTaskDisplay(); // Clear any previous task\r\n            startScanner(); // Start the scanner\r\n        });\r\n    } else {\r\n        console.error(\"Scan Order button element not found on page load.\");\r\n    }\r\n\r\n    // Keep other listeners\r\n    if (confirmPickBtn) {\r\n        confirmPickBtn.addEventListener('click', confirmPick);\r\n    } else {\r\n        console.error(\"Confirm Pick button element not found on page load.\");\r\n    }\r\n\r\n    if (quantityPickedInput) {\r\n        quantityPickedInput.addEventListener('keypress', (event) => {\r\n            if (event.key === 'Enter') {\r\n                event.preventDefault();\r\n                confirmPick();\r\n            }\r\n        });\r\n    } else {\r\n         console.error(\"Quantity picked input element not found on page load.\");\r\n    }\r\n\r\n}); "],"file":"mobile_picker.js"}