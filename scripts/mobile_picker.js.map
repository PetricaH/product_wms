{"version":3,"names":[],"mappings":"","sources":["mobile_picker.js"],"sourcesContent":["// File: src/js/pages/mobile_picker.js\r\n// Added Manual Input Fallback for Location Verification\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    console.log(\"DOM Loaded. Initializing script.\");\r\n\r\n    // --- Configuration ---\r\n    const GET_TASK_API_URL = '/api/picking/get_next_task.php';\r\n    const CONFIRM_PICK_API_URL = '/api/picking/confirm_pick.php';\r\n\r\n    // --- DOM Elements ---\r\n    // Order Input\r\n    const scanOrderBtn = document.getElementById('scan-order-btn');\r\n    const scanOrderSection = document.getElementById('scan-order-section');\r\n    const manualOrderSection = document.getElementById('manual-order-section');\r\n    const orderIdInput = document.getElementById('order-id-input');\r\n    const loadManualOrderBtn = document.getElementById('load-manual-order-btn');\r\n    const toggleManualInputBtn = document.getElementById('toggle-manual-input-btn');\r\n    const toggleScanInputBtn = document.getElementById('toggle-scan-input-btn');\r\n    const scannedOrderIdEl = document.getElementById('scanned-order-id');\r\n\r\n    // Scanner\r\n    const scannerContainer = document.getElementById('scanner-container');\r\n    const readerDiv = document.getElementById('reader');\r\n    const stopScanBtn = document.getElementById('stop-scan-btn');\r\n\r\n    // Location Scan/Input\r\n    const locationScanPrompt = document.getElementById('location-scan-prompt');\r\n    const targetLocationCodeEl = document.getElementById('target-location-code');\r\n    const scanLocationBtn = document.getElementById('scan-location-btn');\r\n    const scanLocationSection = document.getElementById('scan-location-section'); // NEW\r\n    const manualLocationSection = document.getElementById('manual-location-section'); // NEW\r\n    const locationCodeInput = document.getElementById('location-code-input'); // NEW\r\n    const verifyManualLocationBtn = document.getElementById('verify-manual-location-btn'); // NEW\r\n    const toggleManualLocationBtn = document.getElementById('toggle-manual-location-btn'); // NEW\r\n    const toggleScanLocationBtn = document.getElementById('toggle-scan-location-btn'); // NEW\r\n\r\n    // Product Scan/Input\r\n    const productScanPrompt = document.getElementById('product-scan-prompt');\r\n    const targetProductSkuEl = document.getElementById('target-product-sku');\r\n    const targetProductNameEl = document.getElementById('target-product-name');\r\n    const scanProductBtn = document.getElementById('scan-product-btn');\r\n    const scanProductSection = document.getElementById('scan-product-section');\r\n    const manualProductSection = document.getElementById('manual-product-section');\r\n    const productSkuInput = document.getElementById('product-sku-input');\r\n    const verifyManualProductBtn = document.getElementById('verify-manual-product-btn');\r\n    const toggleManualProductBtn = document.getElementById('toggle-manual-product-btn');\r\n    const toggleScanProductBtn = document.getElementById('toggle-scan-product-btn');\r\n\r\n    // Task Display & Confirmation\r\n    const taskDisplay = document.getElementById('task-display');\r\n    const confirmationArea = document.getElementById('confirmation-area');\r\n    const messageArea = document.getElementById('message-area');\r\n    const allDoneMessage = document.getElementById('all-done-message');\r\n    const quantityPickedInput = document.getElementById('quantity-picked-input');\r\n    const confirmPickBtn = document.getElementById('confirm-pick-btn');\r\n    const loadingOverlay = document.getElementById('loading-overlay');\r\n\r\n    // Task Data Elements (in task display)\r\n    const productNameEl = document.getElementById('product-name');\r\n    const productSkuEl = document.getElementById('product-sku');\r\n    const locationCodeEl = document.getElementById('location-code');\r\n    const batchNumberEl = document.getElementById('batch-number');\r\n    const inventoryIdEl = document.getElementById('inventory-id');\r\n    const quantityToPickEl = document.getElementById('quantity-to-pick');\r\n    const totalNeededEl = document.getElementById('total-needed');\r\n    const availableInLocationEl = document.getElementById('available-in-location');\r\n\r\n    // Check elements exist (add new checks)\r\n    // ... (previous checks) ...\r\n    if (!locationCodeInput) console.error(\"Error: Manual Location input not found!\");\r\n    if (!verifyManualLocationBtn) console.error(\"Error: Verify Manual Location button not found!\");\r\n    if (!productScanPrompt) console.error(\"Error: Product Scan Prompt section not found!\");\r\n    if (!targetProductSkuEl) console.error(\"Error: Target Product SKU element not found!\");\r\n    if (!targetProductNameEl) console.error(\"Error: Target Product Name element not found!\");\r\n    if (!scanProductBtn) console.error(\"Error: Scan Product button not found!\");\r\n    if (!scanProductSection) console.error(\"Error: Scan Product Section not found!\");\r\n    if (!manualProductSection) console.error(\"Error: Manual Product Section not found!\");\r\n    if (!productSkuInput) console.error(\"Error: Product SKU input not found!\");\r\n    if (!verifyManualProductBtn) console.error(\"Error: Verify Manual Product button not found!\");\r\n    if (!toggleManualProductBtn) console.error(\"Error: Toggle Manual Product button not found!\");\r\n    if (!toggleScanProductBtn) console.error(\"Error: Toggle Scan Product button not found!\");\r\n    // ... etc. ...\r\n\r\n    // --- State ---\r\n    let currentTask = null;\r\n    let html5QrCode = null;\r\n    let currentScanMode = null; // 'order', 'location', 'product'\r\n\r\n    // --- Core Functions ---\r\n\r\n    /** Shows the loading overlay */\r\n    function showLoading() { if (loadingOverlay) loadingOverlay.classList.remove('hidden'); }\r\n    /** Hides the loading overlay */\r\n    function hideLoading() { if (loadingOverlay) loadingOverlay.classList.add('hidden'); }\r\n\r\n    /** Displays a message to the user */\r\n    function showMessage(message, isError = false) {\r\n        if (!messageArea) return;\r\n        messageArea.textContent = message;\r\n        messageArea.className = `message-area ${isError ? 'message-area--error' : 'message-area--success'}`;\r\n        if (!isError) { setTimeout(() => { if (messageArea.textContent === message) { messageArea.textContent = ''; messageArea.className = 'message-area'; } }, 3000); }\r\n    }\r\n\r\n    /** Clears all dynamic sections of the UI and resets the state */\r\n    function resetUI() {\r\n        console.log(\"Resetting UI\");\r\n        // Hide all dynamic sections\r\n        [taskDisplay, confirmationArea, allDoneMessage, locationScanPrompt, productScanPrompt,\r\n         manualOrderSection, manualLocationSection, manualProductSection].forEach(el => {\r\n            if (el) el.classList.add('hidden');\r\n        });\r\n        // Show default order input mode\r\n        if (scanOrderSection) scanOrderSection.classList.remove('hidden');\r\n\r\n        // Clear text/values\r\n        if (scannedOrderIdEl) scannedOrderIdEl.textContent = '';\r\n        if (targetLocationCodeEl) targetLocationCodeEl.textContent = '';\r\n        if (targetProductSkuEl) targetProductSkuEl.textContent = '';\r\n        if (targetProductNameEl) targetProductNameEl.textContent = '';\r\n        if (messageArea) messageArea.textContent = '';\r\n        if (orderIdInput) orderIdInput.value = '';\r\n        if (locationCodeInput) locationCodeInput.value = ''; // Clear location input\r\n        if (productSkuInput) productSkuInput.value = '';\r\n\r\n        const elementsToClear = [productNameEl, productSkuEl, locationCodeEl, batchNumberEl, inventoryIdEl, quantityToPickEl, totalNeededEl, availableInLocationEl];\r\n        elementsToClear.forEach(el => { if (el) el.textContent = ''; });\r\n\r\n        if (inventoryIdEl) inventoryIdEl.textContent = '0';\r\n        if (quantityToPickEl) quantityToPickEl.textContent = '0';\r\n        if (totalNeededEl) totalNeededEl.textContent = '0';\r\n        if (availableInLocationEl) availableInLocationEl.textContent = '0';\r\n        if (quantityPickedInput) quantityPickedInput.value = '';\r\n\r\n        currentTask = null;\r\n        currentScanMode = null;\r\n        stopScanner();\r\n    }\r\n\r\n    /** Displays the final picking details and enables confirmation */\r\n    function enablePickingControls(taskData) {\r\n        console.log(\"Enabling picking controls for task:\", taskData);\r\n        currentTask = taskData;\r\n\r\n        // Populate the final display area\r\n        if (productNameEl) productNameEl.textContent = taskData.product_name || 'N/A';\r\n        if (productSkuEl) productSkuEl.textContent = taskData.product_sku || 'N/A';\r\n        if (locationCodeEl) locationCodeEl.textContent = taskData.location_code || 'N/A';\r\n        if (batchNumberEl) batchNumberEl.textContent = taskData.batch_number || 'None';\r\n        if (inventoryIdEl) inventoryIdEl.textContent = taskData.inventory_id || '0';\r\n        if (quantityToPickEl) quantityToPickEl.textContent = taskData.quantity_to_pick || '0';\r\n        if (totalNeededEl) totalNeededEl.textContent = taskData.total_needed_for_item || '0';\r\n        if (availableInLocationEl) availableInLocationEl.textContent = taskData.available_in_location || '0';\r\n\r\n        // Pre-fill quantity and set max\r\n        if (quantityPickedInput && quantityPickedInput instanceof HTMLInputElement) {\r\n            try {\r\n                quantityPickedInput.value = taskData.quantity_to_pick || '';\r\n                const maxVal = parseInt(taskData.quantity_to_pick, 10);\r\n                quantityPickedInput.max = !isNaN(maxVal) ? maxVal.toString() : '';\r\n            } catch (e) { console.error(\"Error setting input props:\", e); }\r\n        }\r\n\r\n        // Hide prompts, show final task display and confirmation area\r\n        if (locationScanPrompt) locationScanPrompt.classList.add('hidden');\r\n        if (productScanPrompt) productScanPrompt.classList.add('hidden');\r\n        if (taskDisplay) taskDisplay.classList.remove('hidden');\r\n        if (confirmationArea) confirmationArea.classList.remove('hidden');\r\n        if (allDoneMessage) allDoneMessage.classList.add('hidden');\r\n\r\n        if(quantityPickedInput) quantityPickedInput.focus(); // Focus quantity input\r\n    }\r\n\r\n     /** Shows the prompt to scan/enter the target product */\r\n    function showProductScanPrompt(taskData) {\r\n        console.log(\"Showing product scan prompt for SKU:\", taskData.product_sku);\r\n        currentTask = taskData;\r\n        currentScanMode = 'product';\r\n\r\n        if (targetProductSkuEl) targetProductSkuEl.textContent = taskData.product_sku || 'N/A';\r\n        if (targetProductNameEl) targetProductNameEl.textContent = `(${taskData.product_name || 'Unknown Name'})`;\r\n        if (productSkuInput) productSkuInput.value = ''; // Clear manual input\r\n\r\n        // Hide other sections, show product prompt (default to scan view)\r\n        if (locationScanPrompt) locationScanPrompt.classList.add('hidden');\r\n        if (taskDisplay) taskDisplay.classList.add('hidden');\r\n        if (confirmationArea) confirmationArea.classList.add('hidden');\r\n        if (manualProductSection) manualProductSection.classList.add('hidden');\r\n        if (scanProductSection) scanProductSection.classList.remove('hidden');\r\n        if (productScanPrompt) productScanPrompt.classList.remove('hidden');\r\n\r\n        showMessage(\"Please scan or enter the product SKU.\", false);\r\n    }\r\n\r\n\r\n    /** Shows the prompt to scan/enter the target location */\r\n    function showLocationScanPrompt(taskData) {\r\n        console.log(\"Showing location scan prompt for location:\", taskData.location_code);\r\n        currentTask = taskData;\r\n        currentScanMode = 'location';\r\n\r\n        if (targetLocationCodeEl) targetLocationCodeEl.textContent = taskData.location_code || 'N/A';\r\n        if (locationCodeInput) locationCodeInput.value = ''; // Clear manual input\r\n\r\n        // Hide other sections, show location prompt (default to scan view)\r\n        if (productScanPrompt) productScanPrompt.classList.add('hidden');\r\n        if (taskDisplay) taskDisplay.classList.add('hidden');\r\n        if (confirmationArea) confirmationArea.classList.add('hidden');\r\n        if (allDoneMessage) allDoneMessage.classList.add('hidden');\r\n        if (manualLocationSection) manualLocationSection.classList.add('hidden'); // Hide manual input first\r\n        if (scanLocationSection) scanLocationSection.classList.remove('hidden'); // Show scan button\r\n        if (locationScanPrompt) locationScanPrompt.classList.remove('hidden'); // Show the whole prompt section\r\n\r\n        showMessage(\"Please scan or enter the location code.\", false);\r\n    }\r\n\r\n    /** Fetches the next picking task from the API */\r\n    async function fetchNextTask(orderId) {\r\n        if (!orderId || String(orderId).trim() === '') { showMessage('Invalid Order ID.', true); stopScanner(); return; }\r\n        const trimmedOrderId = String(orderId).trim();\r\n        console.log(`fetchNextTask called with Order ID: ${trimmedOrderId}`);\r\n\r\n        if (scannedOrderIdEl) scannedOrderIdEl.textContent = `Loading Order: ${trimmedOrderId}`;\r\n        // Reset UI except for the order input section\r\n        [locationScanPrompt, productScanPrompt, taskDisplay, confirmationArea, allDoneMessage].forEach(el => el?.classList.add('hidden'));\r\n        if (messageArea) messageArea.textContent = '';\r\n        currentTask = null;\r\n        showLoading();\r\n\r\n        try {\r\n            const response = await fetch(`${GET_TASK_API_URL}?order_id=${encodeURIComponent(trimmedOrderId)}`);\r\n            if (!response.ok) { let e = `HTTP error ${response.status}`; try { e = (await response.json()).message || e; } catch(err){} throw new Error(e); }\r\n            const result = await response.json();\r\n            console.log(\"Fetch result:\", result);\r\n\r\n            if (result.status === 'success') {\r\n                showLocationScanPrompt(result.data); // Start workflow with location prompt\r\n                if (scannedOrderIdEl) scannedOrderIdEl.textContent = `Loaded Order: ${trimmedOrderId}`;\r\n            } else if (result.status === 'complete') {\r\n                if (allDoneMessage) allDoneMessage.classList.remove('hidden');\r\n                showMessage('Order picking complete!', false);\r\n                if (scannedOrderIdEl) scannedOrderIdEl.textContent = `Order ${trimmedOrderId} is complete.`;\r\n            } else {\r\n                showMessage(result.message || `API Error: ${result.status}`, true);\r\n                if (scannedOrderIdEl) scannedOrderIdEl.textContent = `Error loading Order: ${trimmedOrderId}`;\r\n            }\r\n        } catch (error) {\r\n            console.error('Fetch Task Error:', error);\r\n            showMessage(`Error: ${error.message || 'Network error.'}`, true);\r\n            if (scannedOrderIdEl) scannedOrderIdEl.textContent = `Error loading Order: ${trimmedOrderId}`;\r\n        } finally {\r\n            hideLoading();\r\n        }\r\n    }\r\n\r\n    /** Confirms the pick quantity via API */\r\n    async function confirmPick() {\r\n        if (!currentTask) { showMessage('No active task.', true); return; }\r\n        const quantity = parseInt(quantityPickedInput.value, 10);\r\n        // Validation...\r\n        if (isNaN(quantity) || quantity <= 0) { showMessage('Invalid quantity.', true); if(quantityPickedInput) quantityPickedInput.focus(); return; }\r\n        if (quantity > currentTask.quantity_to_pick) { showMessage(`Cannot pick > ${currentTask.quantity_to_pick}.`, true); if(quantityPickedInput) quantityPickedInput.focus(); return; }\r\n        if (quantity > currentTask.available_in_location) { showMessage(`Only ${currentTask.available_in_location} available.`, true); if(quantityPickedInput) quantityPickedInput.focus(); return; }\r\n\r\n        showLoading();\r\n        if (messageArea) messageArea.textContent = '';\r\n        const payload = { order_item_id: currentTask.order_item_id, inventory_id: currentTask.inventory_id, quantity_picked: quantity };\r\n        console.log(\"Confirm pick payload:\", payload);\r\n\r\n        try {\r\n            const response = await fetch(CONFIRM_PICK_API_URL, { method: 'POST', headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' }, body: JSON.stringify(payload) });\r\n            if (!response.ok) { let e = `HTTP error ${response.status}`; try { e = (await response.json()).message || e; } catch(err){} throw new Error(e); }\r\n            const result = await response.json();\r\n            console.log(\"Confirm result:\", result);\r\n\r\n            if (result.status === 'success') {\r\n                showMessage(result.message || 'Pick confirmed!', false);\r\n                if (currentTask.order_id) { fetchNextTask(currentTask.order_id); } // Fetch next task\r\n                else { console.error(\"Order ID missing.\"); showMessage(\"Confirmed, cannot fetch next.\", true); resetUI(); }\r\n            } else { showMessage(result.message || `API Error: ${result.status}`, true); }\r\n        } catch (error) { console.error('Confirm Pick Error:', error); showMessage(`Error: ${error.message || 'Network error.'}`, true); }\r\n        finally { hideLoading(); }\r\n    }\r\n\r\n    // --- Scanner Functions ---\r\n\r\n    /** Callback for successful scan */\r\n    function onScanSuccess(decodedText, decodedResult) {\r\n        console.log(`Scan Success! Mode: ${currentScanMode}, Decoded: ${decodedText}`);\r\n        showMessage(`Scanned: ${decodedText}`, false);\r\n        stopScanner(false); // Stop scanner, don't reset UI yet\r\n\r\n        const scannedValue = decodedText.trim().toUpperCase();\r\n\r\n        if (currentScanMode === 'order') {\r\n            fetchNextTask(scannedValue);\r\n        }\r\n        else if (currentScanMode === 'location') {\r\n            if (!currentTask) { showMessage(\"Error: No task loaded for location scan.\", true); return;}\r\n            const expectedLocation = (currentTask.location_code || '' ).trim().toUpperCase();\r\n            if (scannedValue === expectedLocation) {\r\n                showMessage(\"Location verified!\", false);\r\n                showProductScanPrompt(currentTask);\r\n            } else {\r\n                showMessage(`Wrong Location! Scanned: ${decodedText}, Expected: ${currentTask.location_code}`, true);\r\n                if (scanLocationBtn && !scanLocationSection.classList.contains('hidden')) {\r\n\r\n                } else if (locationCodeInput && !manualLocationSection.classList.contains('hidden')) {\r\n                    locationCodeInput.focus();\r\n                }\r\n            }\r\n        }\r\n        else if (currentScanMode === 'product') {\r\n             if (!currentTask) { showMessage(\"Error: No task loaded.\", true); return; }\r\n             const expectedSku = currentTask.product_sku.trim().toUpperCase();\r\n             if (scannedValue === expectedSku) {\r\n                 showMessage(\"Product verified!\", false);\r\n                 enablePickingControls(currentTask); // Enable final controls\r\n             } else {\r\n                 showMessage(`Wrong Product! Scanned: ${decodedText}, Expected: ${currentTask.product_sku}`, true);\r\n                 if (scanProductBtn && !scanProductSection.classList.contains('hidden')) {\r\n\r\n                 } else if (productSkuInput && !manualProductSection.classList.contains('hidden')) {\r\n                    productSkuInput.focus();\r\n                 }\r\n             }\r\n        }\r\n        else { console.warn(\"Scan occurred in unknown mode:\", currentScanMode); }\r\n    }\r\n\r\n    /** Callback for scan failure */\r\n    function onScanFailure(error) { /* Usually ignore */ }\r\n\r\n    /** Initializes and starts the barcode scanner */\r\n    function startScanner() {\r\n        if (typeof Html5Qrcode === 'undefined') { showMessage(\"Scanner library error.\", true); return; }\r\n        if (html5QrCode?.isScanning) { console.log(\"Scanner already running.\"); return; }\r\n        if (!html5QrCode) { try { html5QrCode = new Html5Qrcode(\"reader\"); } catch (e) { console.error(\"Scanner init failed:\", e); showMessage(\"Scanner init failed.\", true); return; } }\r\n\r\n        const config = { fps: 10, qrbox: (w, h) => { let s=Math.min(w,h)*0.8; return {width:Math.max(s,200),height:Math.max(s,200)}; }, aspectRatio: 1.0, rememberLastUsedCamera: true, supportedScanTypes: [Html5QrcodeScanType.SCAN_TYPE_CAMERA] };\r\n\r\n        console.log(\"Starting scanner for mode:\", currentScanMode);\r\n        if (scannerContainer) scannerContainer.classList.remove('hidden');\r\n        if (stopScanBtn) stopScanBtn.classList.remove('hidden');\r\n        if (messageArea) messageArea.textContent = `Point camera at ${currentScanMode || 'barcode'}...`;\r\n\r\n        html5QrCode.start( { facingMode: \"environment\" }, config, onScanSuccess, onScanFailure)\r\n        .catch((err) => {\r\n            console.error(`Scanner start failed (${currentScanMode}):`, err);\r\n            let userMsg = `Error starting scanner: ${err}`;\r\n            if (String(err).includes(\"Permission\")||String(err).includes(\"NotAllowed\")) { userMsg = \"Camera permission denied.\"; }\r\n            else if (String(err).includes(\"NotFoundError\")||String(err).includes(\"Requested camera\")) { userMsg = \"Camera not found/available.\"; }\r\n            showMessage(userMsg, true);\r\n            if (scannerContainer) scannerContainer.classList.add('hidden');\r\n            if (stopScanBtn) stopScanBtn.classList.add('hidden');\r\n        });\r\n    }\r\n\r\n    /** Stops scanner, optionally resets UI */\r\n    function stopScanner(shouldResetUI = false) {\r\n        if (html5QrCode?.isScanning) {\r\n            console.log(\"Attempting to stop scanner...\");\r\n            html5QrCode.stop().then(() => { console.log(\"Scanner stopped.\"); }).catch((err) => { console.error(\"Scanner stop error:\", err); });\r\n        }\r\n        if (scannerContainer) scannerContainer.classList.add('hidden');\r\n        if (stopScanBtn) stopScanBtn.classList.add('hidden');\r\n        if (shouldResetUI) resetUI();\r\n    }\r\n\r\n    // --- Event Listeners ---\r\n\r\n    // Order Input Mode Toggles & Load\r\n    if (toggleManualInputBtn) { toggleManualInputBtn.addEventListener('click', () => { stopScanner(false); scanOrderSection?.classList.add('hidden'); manualOrderSection?.classList.remove('hidden'); orderIdInput?.focus(); scannedOrderIdEl && (scannedOrderIdEl.textContent = ''); }); }\r\n    if (toggleScanInputBtn) { toggleScanInputBtn.addEventListener('click', () => { manualOrderSection?.classList.add('hidden'); scanOrderSection?.classList.remove('hidden'); scannedOrderIdEl && (scannedOrderIdEl.textContent = ''); }); }\r\n    if (loadManualOrderBtn) { loadManualOrderBtn.addEventListener('click', () => { fetchNextTask(orderIdInput.value); }); }\r\n    if (orderIdInput) { orderIdInput.addEventListener('keypress', (e) => { if (e.key === 'Enter') { e.preventDefault(); fetchNextTask(orderIdInput.value); } }); }\r\n\r\n    // Location Input Mode Toggles & Verify\r\n    if (toggleManualLocationBtn) { toggleManualLocationBtn.addEventListener('click', () => { stopScanner(false); scanLocationSection?.classList.add('hidden'); manualLocationSection?.classList.remove('hidden'); locationCodeInput?.focus(); }); }\r\n    if (toggleScanLocationBtn) { toggleScanLocationBtn.addEventListener('click', () => { manualLocationSection?.classList.add('hidden'); scanLocationSection?.classList.remove('hidden'); }); }\r\n    if (verifyManualLocationBtn) {\r\n        verifyManualLocationBtn.addEventListener('click', () => {\r\n            if (!currentTask) { showMessage(\"Error: No task loaded for manual location verification.\", true); return; }\r\n            const enteredCode = (locationCodeInput.value || '').trim().toUpperCase();\r\n            const expectedCode = (currentTask.location_code || '').trim().toUpperCase();\r\n            if (enteredCode === expectedCode) {\r\n                showMessage(\"Location verified!\", false);\r\n                showProductScanPrompt(currentTask);\r\n            } else {\r\n                showMessage(`Wrong Location! Entered: ${locationCodeInput.value}, Expected: ${currentTask.location_code}`, true);\r\n                locationCodeInput?.focus();\r\n            }\r\n        });\r\n    }\r\n     if (locationCodeInput) { locationCodeInput.addEventListener('keypress', (e) => { if (e.key === 'Enter') { e.preventDefault(); verifyManualLocationBtn.click(); } }); }\r\n\r\n\r\n    // Product Input Mode Toggles & Verify\r\n    if (toggleManualProductBtn) { \r\n            toggleManualProductBtn.addEventListener('click', () => { \r\n            stopScanner(false);\r\n            scanProductSection?.classList.add('hidden'); \r\n            manualProductSection?.classList.remove('hidden'); \r\n            productSkuInput?.focus(); \r\n        });\r\n    }\r\n\r\n    if (toggleScanProductBtn) { \r\n            toggleScanProductBtn.addEventListener('click', () => { \r\n            manualProductSection?.classList.add('hidden'); \r\n            scanProductSection?.classList.remove('hidden'); \r\n        }); \r\n    }\r\n\r\n    if (verifyManualProductBtn) {\r\n        verifyManualProductBtn.addEventListener('click', () => {\r\n             if (!currentTask) { showMessage(\"Error: No task loaded.\", true); return; }\r\n             const enteredSku = productSkuInput.value.trim().toUpperCase();\r\n             const expectedSku = currentTask.product_sku.trim().toUpperCase();\r\n             if (enteredSku === expectedSku) { showMessage(\"Product verified!\", false); enablePickingControls(currentTask); } // Enable final controls\r\n             else { showMessage(`Wrong Product! Entered: ${productSkuInput.value}, Expected: ${currentTask.product_sku}`, true); productSkuInput?.focus(); }\r\n        });\r\n    }\r\n\r\n    if (productSkuInput) { \r\n        productSkuInput.addEventListener('keypress', (e) => { \r\n            if (e.key === 'Enter') { \r\n                e.preventDefault();\r\n                verifyManualProductBtn.click(); \r\n            } \r\n        }); \r\n    }\r\n\r\n\r\n    // Scan Buttons\r\n    if (scanOrderBtn) { \r\n        scanOrderBtn.addEventListener('click', () => {\r\n            resetUI(); \r\n            currentScanMode = 'order'; \r\n            startScanner(); \r\n        }); \r\n    }\r\n\r\n    if (scanLocationBtn) { \r\n        scanLocationBtn.addEventListener('click', () => { \r\n            currentScanMode = 'location'; \r\n            startScanner(); \r\n        }); \r\n    }\r\n\r\n    if (scanProductBtn) { \r\n        scanProductBtn.addEventListener('click', () => { \r\n            currentScanMode = 'product'; \r\n            startScanner(); \r\n        }); \r\n    }\r\n\r\n    // Stop Scan Button\r\n    if (stopScanBtn) { \r\n        stopScanBtn.addEventListener('click', () => { \r\n            stopScanner(false); \r\n            showMessage(\"Scanning stopped.\", false); \r\n        }); \r\n    }\r\n\r\n    // Confirmation Button & Input\r\n    if (confirmPickBtn) { \r\n        confirmPickBtn.addEventListener('click', confirmPick); \r\n    }\r\n\r\n    if (quantityPickedInput) { \r\n        quantityPickedInput.addEventListener('keypress', (e) => {\r\n            if (e.key === 'Enter') {\r\n                e.preventDefault(); \r\n                confirmPick(); \r\n            } \r\n        }); \r\n    }\r\n    \r\n    // --- Initial State ---\r\n    resetUI(); // Start with a clean UI\r\n\r\n}); // End DOMContentLoaded\r\n"],"file":"mobile_picker.js"}